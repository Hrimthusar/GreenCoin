{"changed":true,"filter":false,"title":"Search Results","tooltip":"/.c9/searchresults","value":"Searching for \u0001class oauth\u0001 in\u0001/vendor/lusitanian\u0001\n\n","undoManager":{"mark":-2,"position":19,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":[" "],"id":1},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":[" "]},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001oauth\u0001 in\u0001/vendor/lusitanian\u0001","",""]}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/composer.json:",""],"id":2},{"start":{"row":3,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["\t2:     \"name\": \"lusitanian/oauth\",","\t3:     \"description\": \"PHP 5.3+ oAuth 1/2 Library\",","\t4:     \"keywords\": [\"oauth\", \"authentication\", \"authorization\", \"security\"],","\t36:             \"OAuth\": \"src\",","\t37:             \"OAuth\\\\Unit\": \"tests\"","",""]},{"start":{"row":9,"column":0},"end":{"row":21,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/phpunit.xml.dist:","\t28:                 <file>src/OAuth/bootstrap.php</file>","\t29:                 <file>src/OAuth/Common/Exception/Exception.php</file>","\t30:                 <file>src/OAuth/Common/Http/Exception/TokenResponseException.php</file>","\t31:                 <file>src/OAuth/Common/Storage/Exception/StorageException.php</file>","\t32:                 <file>src/OAuth/Common/Storage/Exception/TokenNotFoundException.php</file>","\t33:                 <file>src/OAuth/Common/Token/Exception/ExpiredTokenException.php</file>","\t34:                 <file>src/OAuth/OAuth1/Signature/Exception/UnsupportedHashAlgorithmException.php</file>","\t35:                 <file>src/OAuth/OAuth2/Service/Exception/InvalidScopeException.php</file>","\t36:                 <file>src/OAuth/OAuth2/Service/Exception/MissingRefreshTokenException.php</file>","\t37:                 <file>src/OAuth/OAuth2/Token/StdOAuth2Token.php</file>","",""]},{"start":{"row":21,"column":0},"end":{"row":40,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/README.md:","\t1: PHPoAuthLib","\t5: PHPoAuthLib provides oAuth support in PHP 5.3+ and is very easy to integrate with any project which requires an oAuth client.","\t7: [![Build Status](https://travis-ci.org/Lusitanian/PHPoAuthLib.png?branch=master)](https://travis-ci.org/Lusitanian/PHPoAuthLib)","\t8: [![Code Coverage](https://scrutinizer-ci.com/g/Lusitanian/PHPoAuthLib/badges/coverage.png?s=a0a15bebfda49e79f9ce289b00c6dfebd18fc98e)](https://scrutinizer-ci.com/g/Lusitanian/PHPoAuthLib/)","\t9: [![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/Lusitanian/PHPoAuthLib/badges/quality-score.png?s=c5976d2fefceb501f0d886c1a5bf087e69b44533)](https://scrutinizer-ci.com/g/Lusitanian/PHPoAuthLib/)","\t10: [![Latest Stable Version](https://poser.pugx.org/lusitanian/oauth/v/stable.png)](https://packagist.org/packages/lusitanian/oauth)","\t11: [![Total Downloads](https://poser.pugx.org/lusitanian/oauth/downloads.png)](https://packagist.org/packages/lusitanian/oauth)","\t15: This library can be found on [Packagist](https://packagist.org/packages/lusitanian/oauth).","\t23:         \"lusitanian/oauth\": \"~0.3\"","\t40:     - You can use any HTTP client you desire, just create a class utilizing it which implements `OAuth\\Common\\Http\\ClientInterface` (two implementations are included)","\t41:     - You can use any storage mechanism for tokens. By default, session, in-memory and Redis.io (requires PHPRedis) storage mechanisms are included. Implement additional mechanisms by implementing `OAuth\\Common\\Token\\TokenStorageInterface`.","\t45: The library supports both oAuth 1.x and oAuth 2.0 compliant services. A list of currently implemented services can be found below.","\t49: - OAuth1","\t61: - OAuth2","\t115: * Laravel 4: Dariusz PrzÄ…da has written [a service provider](https://github.com/artdarek/oauth-4-laravel) for the library.","\t116: * Symfony: Alexander Pinnecke has written [a Symfony Bundle](https://github.com/apinnecke/OAuthBundle) for the library.","\t120: * Extract normalized user data from OAuth Services with the library [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData) by Luciano Mammino","",""]}],[{"start":{"row":40,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/amazon.php:","\t13: use OAuth\\OAuth2\\Service\\Amazon;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","",""],"id":3},{"start":{"row":45,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/bitbucket.php:",""]},{"start":{"row":46,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["\t16: use OAuth\\OAuth1\\Service\\BitBucket;","\t17: use OAuth\\Common\\Storage\\Session;","\t18: use OAuth\\Common\\Consumer\\Credentials;","\t25: // We need to use a persistent storage to save the token, because oauth1 requires the token secret received before'","\t40: if (!empty($_GET['oauth_token'])) {","\t45:         $_GET['oauth_token'],","\t46:         $_GET['oauth_verifier'],","\t56:     // extra request needed for oauth1 to request a request token :-)","\t59:     $url = $bbService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","",""]},{"start":{"row":56,"column":0},"end":{"row":61,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/bitly.php:","\t14: use OAuth\\OAuth2\\Service\\Bitly;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","",""]},{"start":{"row":61,"column":0},"end":{"row":68,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/bitrix24.php:","\t14: use OAuth\\OAuth2\\Service\\GitHub;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t35: $yourDomain = new \\OAuth\\Common\\Http\\Uri\\Uri('https://'.$servicesCredentials['bitrix24']['domain']);","\t36: /** @var $bitrix24 \\OAuth\\OAuth2\\Service\\Bitrix24 */","",""]},{"start":{"row":68,"column":0},"end":{"row":71,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/bootstrap.php:","\t22: $uriFactory = new \\OAuth\\Common\\Http\\Uri\\UriFactory();","",""]},{"start":{"row":71,"column":0},"end":{"row":72,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/box.php:",""]},{"start":{"row":72,"column":0},"end":{"row":81,"column":0},"action":"insert","lines":["\t15: use OAuth\\OAuth2\\Service\\Box;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/buffer.php:","\t14: use OAuth\\OAuth2\\Service\\Buffer;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","",""]},{"start":{"row":81,"column":0},"end":{"row":82,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/dailymotion.php:",""]},{"start":{"row":82,"column":0},"end":{"row":87,"column":0},"action":"insert","lines":["\t13: use OAuth\\OAuth2\\Service\\Dailymotion;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/deezer.php:",""]},{"start":{"row":87,"column":0},"end":{"row":92,"column":0},"action":"insert","lines":["\t11: use OAuth\\OAuth2\\Service\\Deezer;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","",""]},{"start":{"row":92,"column":0},"end":{"row":93,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/delicious.php:",""]},{"start":{"row":93,"column":0},"end":{"row":99,"column":0},"action":"insert","lines":["\t10:  * @link    https://github.com/SciDevs/delicious-api/blob/master/api/oauth.md","\t13: use OAuth\\OAuth2\\Service\\Delicious;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t16: use OAuth\\Common\\Http\\Client\\CurlClient;","",""]},{"start":{"row":99,"column":0},"end":{"row":104,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/deviantart.php:","\t15: use OAuth\\OAuth2\\Service\\Facebook;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","",""]},{"start":{"row":104,"column":0},"end":{"row":109,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/dropbox.php:","\t13: use OAuth\\OAuth2\\Service\\Dropbox;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","",""]},{"start":{"row":109,"column":0},"end":{"row":117,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/etsy.php:","\t13: use OAuth\\OAuth1\\Service\\Etsy;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t36: if (!empty($_GET['oauth_token'])) {","\t41:         $_GET['oauth_token'],","\t42:         $_GET['oauth_verifier'],","",""]},{"start":{"row":117,"column":0},"end":{"row":118,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/eveonline.php:",""]},{"start":{"row":118,"column":0},"end":{"row":123,"column":0},"action":"insert","lines":["\t11: use OAuth\\Common\\Consumer\\Credentials;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\OAuth2\\Service\\EveOnline;","\t39:     $result = json_decode($eveService->request('/oauth/verify'), true);","",""]},{"start":{"row":123,"column":0},"end":{"row":128,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/facebook.php:","\t15: use OAuth\\OAuth2\\Service\\Facebook;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","",""]},{"start":{"row":128,"column":0},"end":{"row":138,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/fitbit.php:","\t14: use OAuth\\OAuth1\\Service\\FitBit;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t37: if (!empty($_GET['oauth_token'])) {","\t42:         $_GET['oauth_token'],","\t43:         $_GET['oauth_verifier'],","\t53:     // extra request needed for oauth1 to request a request token :-)","\t56:     $url = $fitbitService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","",""]},{"start":{"row":138,"column":0},"end":{"row":148,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/fiveHundredPx.php:","\t14: use OAuth\\OAuth1\\Service\\fiveHundredPx;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t37: if (!empty($_GET['oauth_token'])) {","\t42:         $_GET['oauth_token'],","\t43:         $_GET['oauth_verifier'],","\t53:     // extra request needed for oauth1 to request a request token :-)","\t56:     $url = $fivehundredpxService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","",""]},{"start":{"row":148,"column":0},"end":{"row":162,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/flickr.php:","\t11: use OAuth\\OAuth1\\Service\\Flickr;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","\t36: $oauth_token = isset($_GET['oauth_token']) ? $_GET['oauth_token'] : null;","\t37: $oauth_verifier = isset($_GET['oauth_verifier']) ? $_GET['oauth_verifier'] : null;","\t39: if($oauth_token && $oauth_verifier){","\t51: \t\t\t$oauth_token = $token->getAccessToken();","\t54: \t\t\tif($oauth_token && $secret){","\t55: \t\t\t\t$url = $flickrService->getAuthorizationUri(array('oauth_token' => $oauth_token, 'perms' => 'write'));","\t66: \t\tif($token = $flickrService->requestAccessToken($oauth_token, $oauth_verifier, $secret)){","\t67: \t\t\t$oauth_token = $token->getAccessToken();","",""]}],[{"start":{"row":162,"column":0},"end":{"row":167,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/foursquare.php:","\t14: use OAuth\\OAuth2\\Service\\Foursquare;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","",""],"id":4},{"start":{"row":167,"column":0},"end":{"row":168,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/github.php:",""]},{"start":{"row":168,"column":0},"end":{"row":173,"column":0},"action":"insert","lines":["\t14: use OAuth\\OAuth2\\Service\\GitHub;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/google.php:",""]},{"start":{"row":173,"column":0},"end":{"row":177,"column":0},"action":"insert","lines":["\t14: use OAuth\\OAuth2\\Service\\Google;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","",""]},{"start":{"row":177,"column":0},"end":{"row":183,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/harvest.php:","\t14: use OAuth\\Common\\Consumer\\Credentials;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Token\\Exception\\ExpiredTokenException;","\t17: use OAuth\\OAuth2\\Service\\Harvest;","",""]},{"start":{"row":183,"column":0},"end":{"row":189,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/hubic.php:","\t13: use OAuth\\OAuth2\\Service\\Hubic;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t16: use OAuth\\Common\\Http\\Client\\CurlClient;","",""]},{"start":{"row":189,"column":0},"end":{"row":193,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/init.example.php:","\t203: /** @var $serviceFactory \\OAuth\\ServiceFactory An OAuth service factory. */","\t204: $serviceFactory = new \\OAuth\\ServiceFactory();","",""]},{"start":{"row":193,"column":0},"end":{"row":198,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/instagram.php:","\t15: use OAuth\\OAuth2\\Service\\Instagram;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","",""]},{"start":{"row":198,"column":0},"end":{"row":440,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/examples/jawbone.php:","\t13: use OAuth\\OAuth2\\Service\\JawboneUP;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/linkedin.php:","\t15: use OAuth\\OAuth2\\Service\\Linkedin;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/mailchimp.php:","\t14: use OAuth\\OAuth2\\Service\\Mailchimp;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/microsoft.php:","\t14: use OAuth\\OAuth2\\Service\\Microsoft;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/nest.php:","\t11: use OAuth\\OAuth2\\Service\\Nest;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/netatmo.php:","\t13: use OAuth\\OAuth2\\Service\\Netatmo;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t16: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/parrotFlowerPower.php:","\t13: use OAuth\\OAuth2\\Service\\ParrotFlowerPower;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t16: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/paypal.php:","\t13: use OAuth\\OAuth2\\Service\\Paypal;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/pinterest.php:","\t11: use OAuth\\OAuth2\\Service\\Pinterest;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/pocket.php:","\t11: use OAuth\\OAuth2\\Service\\Pocket;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/quickbooks.php:","\t12: use OAuth\\OAuth1\\Service\\QuickBooks;","\t13: use OAuth\\Common\\Storage\\Session;","\t14: use OAuth\\Common\\Consumer\\Credentials;","\t41: if (!empty($_GET['oauth_token'])) {","\t46:         $_GET['oauth_token'],","\t47:         $_GET['oauth_verifier'],","\t59:     // extra request needed for oauth1 to request a request token :-)","\t62:     $url = $quickbooksService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/reddit.php:","\t13: use OAuth\\OAuth2\\Service\\Reddit;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/redmine.php:","\t5:  * Developed against https://github.com/suer/redmine_oauth_provider","\t6:  * To create oauth credentials read the plugin documentation from","\t7:  * redmine_oauth_provider.","\t21: use OAuth\\Common\\Storage\\Session;","\t22: use OAuth\\Common\\Consumer\\Credentials;","\t23: use OAuth\\Common\\Http\\Uri\\Uri;","\t35: // Instantiate the Redmine service using the credentials, http client, storage mechanism for the token and adding the base uri of the oauth provider","\t36: $redmineService = $serviceFactory->createService('Redmine', $credentials, $storage, array(), new Uri('https://redmine.example.dev/oauth/'));","\t38: if (!empty($_GET['oauth_token'])) {","\t43:         $_GET['oauth_token'],","\t44:         $_GET['oauth_verifier'],","\t54:     // extra request needed for oauth1 to request a request token :-)","\t57:     $url = $redmineService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/runkeeper.php:","\t12: use OAuth\\OAuth2\\Service\\RunKeeper;","\t13: use OAuth\\Common\\Storage\\Session;","\t14: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/scoopit.php:","\t11: use OAuth\\OAuth1\\Service\\ScoopIt;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t33: if (!empty($_GET['oauth_token'])) {","\t38:         $_GET['oauth_token'],","\t39:         $_GET['oauth_verifier'],","\t49:     // extra request needed for oauth1 to request a request token :-)","\t52:     $url = $scoopItService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/soundcloud.php:","\t14: use OAuth\\OAuth2\\Service\\SoundCloud;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/spotify.php:","\t14: use OAuth\\OAuth2\\Service\\Spotify;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/strava.php:","\t14: use OAuth\\OAuth2\\Service\\Strava;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t18: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/tumblr.php:","\t14: use OAuth\\OAuth1\\Service\\Tumblr;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t23: // We need to use a persistent storage to save the token, because oauth1 requires the token secret received before'","\t38: if (!empty($_GET['oauth_token'])) {","\t43:         $_GET['oauth_token'],","\t44:         $_GET['oauth_verifier'],","\t54:     // extra request needed for oauth1 to request a request token :-)","\t57:     $url = $tumblrService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/twitter.php:","\t14: use OAuth\\OAuth1\\Service\\Twitter;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t23: // We need to use a persistent storage to save the token, because oauth1 requires the token secret received before'","\t38: if (!empty($_GET['oauth_token'])) {","\t43:         $_GET['oauth_token'],","\t44:         $_GET['oauth_verifier'],","\t54:     // extra request needed for oauth1 to request a request token :-)","\t57:     $url = $twitterService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/ustream.php:","\t13: use OAuth\\OAuth2\\Service\\Ustream;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/vimeo.php:","\t13: use OAuth\\OAuth2\\Service\\Vimeo;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/yahoo.php:","\t11: use OAuth\\OAuth1\\Service\\Yahoo;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t33: if (!empty($_GET['oauth_token'])) {","\t38:         $_GET['oauth_token'],","\t39:         $_GET['oauth_verifier'],","\t49:     // extra request needed for oauth1 to request a request token :-)","\t52:     $url = $yahooService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/yammer.php:","\t13: use OAuth\\OAuth2\\Service\\Yammer;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t17: include_once(__DIR__.'/OAuth/bootstrap.php');","\t24: //$serviceFactory = new \\OAuth\\ServiceFactory(); ","\t27: //$uriFactory = new \\OAuth\\Common\\Http\\Uri\\UriFactory();","","/vendor/lusitanian/oauth/src/OAuth/bootstrap.php:","\t7: namespace OAuth;","","/vendor/lusitanian/oauth/src/OAuth/ServiceFactory.php:","\t4:  * OAuth service factory.","\t8:  * @category   OAuth","\t15: namespace OAuth;","\t17: use OAuth\\Common\\Service\\ServiceInterface;","\t18: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t19: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t20: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t21: use OAuth\\Common\\Http\\Client\\StreamClient;","\t22: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t23: use OAuth\\Common\\Exception\\Exception;","\t24: use OAuth\\OAuth1\\Signature\\Signature;","\t37:         'OAuth1' => array(),","\t38:         'OAuth2' => array()","\t45:         'OAuth2' => 'buildV2Service',","\t46:         'OAuth1' => 'buildV1Service',","\t79:         foreach (array('OAuth2', 'OAuth1') as $version) {","\t80:             if ($reflClass->implementsInterface('OAuth\\\\' . $version . '\\\\Service\\\\ServiceInterface')) {","\t91:      * Builds and returns oauth services","\t93:      * It will first try to build an OAuth2 service and if none found it will try to build an OAuth1 service","\t98:      * @param array|null            $scopes      If creating an oauth2 service, array of scopes","\t139:      * @param string $type        The type of the service to get (either OAuth1 or OAuth2)","\t151:         return '\\\\OAuth\\\\' . $type . '\\\\Service\\\\' . $serviceName;","\t234:                 'Scopes passed to ServiceFactory::createService but an OAuth1 service was requested.'","","/vendor/lusitanian/oauth/src/OAuth/Common/AutoLoader.php:","\t3: namespace OAuth\\Common;","","/vendor/lusitanian/oauth/src/OAuth/Common/Consumer/Credentials.php:","\t3: namespace OAuth\\Common\\Consumer;","\t6:  * Value object for the credentials of an OAuth service.","","/vendor/lusitanian/oauth/src/OAuth/Common/Consumer/CredentialsInterface.php:","\t3: namespace OAuth\\Common\\Consumer;","","/vendor/lusitanian/oauth/src/OAuth/Common/Exception/Exception.php:","\t3: namespace OAuth\\Common\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Client/AbstractClient.php:","\t3: namespace OAuth\\Common\\Http\\Client;","\t30:     public function __construct($userAgent = 'PHPoAuthLib')","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Client/ClientInterface.php:","\t3: namespace OAuth\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Client/CurlClient.php:","\t3: namespace OAuth\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Client/StreamClient.php:","\t3: namespace OAuth\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Exception/TokenResponseException.php:","\t3: namespace OAuth\\Common\\Http\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Uri/Uri.php:","\t3: namespace OAuth\\Common\\Http\\Uri;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Uri/UriFactory.php:","\t3: namespace OAuth\\Common\\Http\\Uri;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Uri/UriFactoryInterface.php:","\t3: namespace OAuth\\Common\\Http\\Uri;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Uri/UriInterface.php:","\t3: namespace OAuth\\Common\\Http\\Uri;","",""]},{"start":{"row":440,"column":0},"end":{"row":455,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Service/AbstractService.php:","\t3: namespace OAuth\\Common\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t9: use OAuth\\Common\\Exception\\Exception;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t13:  * Abstract OAuth service, version-agnostic","","/vendor/lusitanian/oauth/src/OAuth/Common/Service/ServiceInterface.php:","\t3: namespace OAuth\\Common\\Service;","\t5: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t8:  * Defines methods common among all OAuth services.","",""]},{"start":{"row":455,"column":0},"end":{"row":461,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Memory.php:","\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","\t7: use OAuth\\Common\\Storage\\Exception\\AuthorizationStateNotFoundException;","",""]},{"start":{"row":461,"column":0},"end":{"row":462,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Redis.php:",""]},{"start":{"row":462,"column":0},"end":{"row":467,"column":0},"action":"insert","lines":["\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","\t7: use OAuth\\Common\\Storage\\Exception\\AuthorizationStateNotFoundException;","",""]},{"start":{"row":467,"column":0},"end":{"row":475,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Session.php:","\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","\t7: use OAuth\\Common\\Storage\\Exception\\AuthorizationStateNotFoundException;","\t36:         $sessionVariableName = 'lusitanian-oauth-token',","\t37:         $stateVariableName = 'lusitanian-oauth-state'","",""]},{"start":{"row":475,"column":0},"end":{"row":483,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Storage/SymfonySession.php:","\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","\t7: use OAuth\\Common\\Storage\\Exception\\AuthorizationStateNotFoundException;","\t25:         $sessionVariableName = 'lusitanian_oauth_token',","\t26:         $stateVariableName = 'lusitanian_oauth_state'","",""]},{"start":{"row":483,"column":0},"end":{"row":488,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Storage/TokenStorageInterface.php:","\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","",""]},{"start":{"row":488,"column":0},"end":{"row":495,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Exception/AuthorizationStateNotFoundException.php:","\t3: namespace OAuth\\Common\\Storage\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Exception/StorageException.php:","\t3: namespace OAuth\\Common\\Storage\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","",""]},{"start":{"row":495,"column":0},"end":{"row":498,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Exception/TokenNotFoundException.php:","\t3: namespace OAuth\\Common\\Storage\\Exception;","",""]},{"start":{"row":498,"column":0},"end":{"row":499,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Token/AbstractToken.php:",""]},{"start":{"row":499,"column":0},"end":{"row":507,"column":0},"action":"insert","lines":["\t3: namespace OAuth\\Common\\Token;","\t6:  * Base token implementation for any OAuth version.","","/vendor/lusitanian/oauth/src/OAuth/Common/Token/TokenInterface.php:","\t3: namespace OAuth\\Common\\Token;","\t6:  * Base token interface for any OAuth version.","\t16:      * Denotes a token which never expires, should only happen in OAuth1.","",""]},{"start":{"row":507,"column":0},"end":{"row":511,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Token/Exception/ExpiredTokenException.php:","\t3: namespace OAuth\\Common\\Token\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","",""]},{"start":{"row":511,"column":0},"end":{"row":549,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/AbstractService.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t11: use OAuth\\OAuth1\\Token\\TokenInterface;","\t12: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t13: use OAuth\\Common\\Service\\AbstractService as BaseAbstractService;","\t17:     /** @const OAUTH_VERSION */","\t18:     const OAUTH_VERSION = 1;","\t50:         $headers = array_merge($authorizationHeader, $this->getExtraOAuthHeaders());","\t86:             'oauth_verifier' => $verifier,","\t98:         $headers = array_merge($authorizationHeader, $this->getExtraOAuthHeaders());","\t109:      * Refreshes an OAuth1 access token","\t133:         /** @var $token StdOAuth1Token */","\t145:      * Return any additional headers always needed for this service implementation's OAuth calls.","\t149:     protected function getExtraOAuthHeaders()","\t175:         $parameters['oauth_signature'] = $this->signature->getSignature(","\t181:         $authorizationHeader = 'OAuth ';","\t210:         if (isset($authParameters['oauth_callback'])) {","\t211:             unset($authParameters['oauth_callback']);","\t214:         $authParameters = array_merge($authParameters, array('oauth_token' => $token->getAccessToken()));","\t217:         $authParameters['oauth_signature'] = $this->signature->getSignature($uri, $signatureParams, $method);","\t219:         if (is_array($bodyParams) && isset($bodyParams['oauth_session_handle'])) {","\t220:             $authParameters['oauth_session_handle'] = $bodyParams['oauth_session_handle'];","\t221:             unset($bodyParams['oauth_session_handle']);","\t224:         $authorizationHeader = 'OAuth ';","\t244:             'oauth_callback'         => $this->credentials->getCallbackUrl(),","\t245:             'oauth_consumer_key'     => $this->credentials->getConsumerId(),","\t246:             'oauth_nonce'            => $this->generateNonce(),","\t247:             'oauth_signature_method' => $this->getSignatureMethod(),","\t248:             'oauth_timestamp'        => $dateTime->format('U'),","\t249:             'oauth_version'          => $this->getVersion(),","\t295:      * This is only needed to verify the `oauth_callback_confirmed` parameter. The actual","",""]},{"start":{"row":549,"column":0},"end":{"row":593,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/BitBucket.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t35:         return new Uri('https://bitbucket.org/!api/1.0/oauth/request_token');","\t43:         return new Uri('https://bitbucket.org/!api/1.0/oauth/authenticate');","\t51:         return new Uri('https://bitbucket.org/!api/1.0/oauth/access_token');","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Etsy.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t38:         $uri = new Uri($this->baseApiUri . 'oauth/request_token');","\t61:         return new Uri($this->baseApiUri . 'oauth/access_token');","\t73:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t93:         $token = new StdOAuth1Token();","\t95:         $token->setRequestToken($data['oauth_token']);","\t96:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t97:         $token->setAccessToken($data['oauth_token']);","\t98:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t100:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t101:         unset($data['oauth_token'], $data['oauth_token_secret']);","\t109:      * @see https://www.etsy.com/developers/documentation/getting_started/oauth#section_permission_scopes","",""]},{"start":{"row":593,"column":0},"end":{"row":615,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/FitBit.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t35:         return new Uri('https://api.fitbit.com/oauth/request_token');","\t43:         return new Uri('https://www.fitbit.com/oauth/authorize');","\t51:         return new Uri('https://api.fitbit.com/oauth/access_token');","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","",""]},{"start":{"row":615,"column":0},"end":{"row":616,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/FiveHundredPx.php:",""]},{"start":{"row":616,"column":0},"end":{"row":638,"column":0},"action":"insert","lines":["\t10: namespace OAuth\\OAuth1\\Service;","\t12: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t13: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t14: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t15: use OAuth\\Common\\Http\\Uri\\Uri;","\t16: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t17: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t18: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t19: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t55:         return new Uri('https://api.500px.com/v1/oauth/request_token');","\t63:         return new Uri('https://api.500px.com/v1/oauth/authorize');","\t71:         return new Uri('https://api.500px.com/v1/oauth/access_token');","\t83:         } elseif (!isset($data['oauth_callback_confirmed'])","\t84:             || $data['oauth_callback_confirmed'] !== 'true'","\t107:         $token = new StdOAuth1Token();","\t109:         $token->setRequestToken($data['oauth_token']);","\t110:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t111:         $token->setAccessToken($data['oauth_token']);","\t112:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t114:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t115:         unset($data['oauth_token'], $data['oauth_token_secret']);","",""]},{"start":{"row":638,"column":0},"end":{"row":737,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Flickr.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t33:         return new Uri('https://www.flickr.com/services/oauth/request_token');","\t38:         return new Uri('https://www.flickr.com/services/oauth/authorize');","\t43:         return new Uri('https://www.flickr.com/services/oauth/access_token');","\t51:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] != 'true') {","\t66:         $token = new StdOAuth1Token();","\t67:         $token->setRequestToken($data['oauth_token']);","\t68:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t69:         $token->setAccessToken($data['oauth_token']);","\t70:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t71:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t72:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/QuickBooks.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t12: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t44:         return new Uri('https://oauth.intuit.com/oauth/v1/get_request_token');","\t60:         return new Uri('https://oauth.intuit.com/oauth/v1/get_access_token');","\t72:         } elseif (!isset($data['oauth_callback_confirmed'])","\t73:             || $data['oauth_callback_confirmed'] !== 'true') {","\t94:         $token = new StdOAuth1Token();","\t96:         $token->setRequestToken($data['oauth_token']);","\t97:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t98:         $token->setAccessToken($data['oauth_token']);","\t99:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t101:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t102:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Redmine.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/ScoopIt.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t35:         return new Uri('https://www.scoop.it/oauth/request');","\t43:         return new Uri('https://www.scoop.it/oauth/authorize');","\t51:         return new Uri('https://www.scoop.it/oauth/access');","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/ServiceInterface.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t7: use OAuth\\Common\\Token\\TokenInterface;","\t8: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t11: use OAuth\\Common\\Service\\ServiceInterface as BaseServiceInterface;","\t12: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t15:  * Defines the common methods across OAuth 1 services.","\t20:      * Retrieves and stores/returns the OAuth1 request token obtained from the service.","\t29:      * Retrieves and stores/returns the OAuth1 access token after a successful authorization.","",""]},{"start":{"row":737,"column":0},"end":{"row":738,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Tumblr.php:",""]}],[{"start":{"row":738,"column":0},"end":{"row":759,"column":0},"action":"insert","lines":["\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t35:         return new Uri('https://www.tumblr.com/oauth/request_token');","\t43:         return new Uri('https://www.tumblr.com/oauth/authorize');","\t51:         return new Uri('https://www.tumblr.com/oauth/access_token');","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","",""],"id":5},{"start":{"row":759,"column":0},"end":{"row":785,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Twitter.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t13: use OAuth\\Common\\Exception\\Exception;","\t17:     const ENDPOINT_AUTHENTICATE = \"https://api.twitter.com/oauth/authenticate\";","\t18:     const ENDPOINT_AUTHORIZE    = \"https://api.twitter.com/oauth/authorize\";","\t41:         return new Uri('https://api.twitter.com/oauth/request_token');","\t76:         return new Uri('https://api.twitter.com/oauth/access_token');","\t88:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t106:         } elseif (!isset($data[\"oauth_token\"]) || !isset($data[\"oauth_token_secret\"])) {","\t107:             throw new TokenResponseException('Invalid response. OAuth Token data not set: ' . $responseBody);","\t110:         $token = new StdOAuth1Token();","\t112:         $token->setRequestToken($data['oauth_token']);","\t113:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t114:         $token->setAccessToken($data['oauth_token']);","\t115:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t117:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t118:         unset($data['oauth_token'], $data['oauth_token_secret']);","",""]},{"start":{"row":785,"column":0},"end":{"row":831,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Xing.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t84:         $token = new StdOAuth1Token();","\t86:         $token->setRequestToken($data['oauth_token']);","\t87:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t88:         $token->setAccessToken($data['oauth_token']);","\t89:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t91:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t92:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Yahoo.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t13: use OAuth\\OAuth1\\Token\\TokenInterface;","\t36:         return new Uri('https://api.login.yahoo.com/oauth/v2/get_request_token');","\t44:         return new Uri('https://api.login.yahoo.com/oauth/v2/request_auth');","\t52:         return new Uri('https://api.login.yahoo.com/oauth/v2/get_token');","\t61:         $bodyParams = array('oauth_session_handle' => $extraParams['oauth_session_handle']);","\t74:         $headers = array_merge($authorizationHeader, $this->getExtraOAuthHeaders(), array());","\t93:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t113:         $token = new StdOAuth1Token();","\t115:         $token->setRequestToken($data['oauth_token']);","\t116:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t117:         $token->setAccessToken($data['oauth_token']);","\t118:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t120:         if (isset($data['oauth_expires_in'])) {","\t121:             $token->setLifetime($data['oauth_expires_in']);","\t123:             $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t126:         unset($data['oauth_token'], $data['oauth_token_secret']);","",""]},{"start":{"row":831,"column":0},"end":{"row":837,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Signature/Signature.php:","\t3: namespace OAuth\\OAuth1\\Signature;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t7: use OAuth\\OAuth1\\Signature\\Exception\\UnsupportedHashAlgorithmException;","",""]},{"start":{"row":837,"column":0},"end":{"row":842,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Signature/SignatureInterface.php:","\t3: namespace OAuth\\OAuth1\\Signature;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","",""]},{"start":{"row":842,"column":0},"end":{"row":847,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth1/Signature/Exception/UnsupportedHashAlgorithmException.php:","\t3: namespace OAuth\\OAuth1\\Signature\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Token/StdOAuth1Token.php:",""]},{"start":{"row":847,"column":0},"end":{"row":854,"column":0},"action":"insert","lines":["\t3: namespace OAuth\\OAuth1\\Token;","\t5: use OAuth\\Common\\Token\\AbstractToken;","\t8:  * Standard OAuth1 token implementation.","\t9:  * Implements OAuth\\OAuth1\\Token\\TokenInterface in case of any OAuth1 specific features.","\t11: class StdOAuth1Token extends AbstractToken implements TokenInterface","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Token/TokenInterface.php:",""]},{"start":{"row":854,"column":0},"end":{"row":858,"column":0},"action":"insert","lines":["\t3: namespace OAuth\\OAuth1\\Token;","\t5: use OAuth\\Common\\Token\\TokenInterface as BaseTokenInterface;","\t8:  * OAuth1 specific token interface","",""]},{"start":{"row":858,"column":0},"end":{"row":911,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/AbstractService.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Exception\\Exception;","\t7: use OAuth\\Common\\Service\\AbstractService as BaseAbstractService;","\t8: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t9: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t12: use OAuth\\OAuth2\\Service\\Exception\\InvalidAuthorizationStateException;","\t13: use OAuth\\OAuth2\\Service\\Exception\\InvalidScopeException;","\t14: use OAuth\\OAuth2\\Service\\Exception\\MissingRefreshTokenException;","\t15: use OAuth\\Common\\Token\\TokenInterface;","\t16: use OAuth\\Common\\Token\\Exception\\ExpiredTokenException;","\t20:     /** @const OAUTH_VERSION */","\t21:     const OAUTH_VERSION = 2;","\t124:             $this->getExtraOAuthHeaders()","\t167:         if (static::AUTHORIZATION_METHOD_HEADER_OAUTH === $this->getAuthorizationMethod()) {","\t168:             $extraHeaders = array_merge(array('Authorization' => 'OAuth ' . $token->getAccessToken()), $extraHeaders);","\t172:             $uri->addToQuery('oauth2_access_token', $token->getAccessToken());","\t197:      * Refreshes an OAuth2 access token.","\t224:             $this->getExtraOAuthHeaders()","\t300:      * Return any additional headers always needed for this service implementation's OAuth calls.","\t304:     protected function getExtraOAuthHeaders()","\t340:         return static::AUTHORIZATION_METHOD_HEADER_OAUTH;","\t355:      * For services that do not fully respect the Oauth's RFC,","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Amazon.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t81:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Bitly.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t34:         return new Uri('https://bitly.com/oauth/authorize');","\t42:         return new Uri('https://api-ssl.bitly.com/oauth/access_token');","\t66:         $token = new StdOAuth2Token();","\t69:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","\t97:             $this->getExtraOAuthHeaders()","",""]}],[{"start":{"row":911,"column":0},"end":{"row":1117,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Bitrix24.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t31:         return new Uri(sprintf('%s/oauth/authorize/', $this->baseApiUri));","\t39:         return new Uri(sprintf('%s/oauth/token/', $this->baseApiUri));","\t54:             $this->getExtraOAuthHeaders(),","\t102:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Box.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t17:  * @link https://developers.box.com/oauth/","\t40:         return new Uri('https://www.box.com/api/oauth2/authorize');","\t48:         return new Uri('https://www.box.com/api/oauth2/token');","\t72:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Buffer.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t38:         return new Uri('https://bufferapp.com/oauth2/authorize');","\t46:         return new Uri('https://api.bufferapp.com/1/oauth2/token.json');","\t124:             $this->getExtraOAuthHeaders()","\t142:         $token = new StdOAuth2Token();","\t145:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Dailymotion.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t68:         return new Uri('https://api.dailymotion.com/oauth/authorize');","\t76:         return new Uri('https://api.dailymotion.com/oauth/token');","\t84:         return static::AUTHORIZATION_METHOD_HEADER_OAUTH;","\t105:         $token = new StdOAuth2Token();","\t125:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Deezer.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t67:         return new Uri('https://connect.deezer.com/oauth/auth.php');","\t75:         return new Uri('https://connect.deezer.com/oauth/access_token.php');","\t104:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Delicious.php:","\t7:  * @link    https://github.com/SciDevs/delicious-api/blob/master/api/oauth.md","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t25:  * @link    https://github.com/SciDevs/delicious-api/blob/master/api/oauth.md","\t64:         return new Uri('https://avosapi.delicious.com/api/v1/oauth/token');","\t90:         $token = new StdOAuth2Token();","\t110:     // Special, delicious didn't respect the oauth2 RFC and need a grant_type='code'","\t131:             $this->getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/DeviantArt.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Exception\\Exception;","\t6: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t46:             $this->baseApiUri = new Uri('https://www.deviantart.com/api/v1/oauth2/');","\t55:         return new Uri('https://www.deviantart.com/oauth2/authorize');","\t63:         return new Uri('https://www.deviantart.com/oauth2/token');","\t80:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Dropbox.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t65:         return new Uri('https://www.dropbox.com/1/oauth2/authorize');","\t73:         return new Uri('https://api.dropbox.com/1/oauth2/token');","\t97:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/EveOnline.php:","\t8: namespace OAuth\\OAuth2\\Service;","\t10: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t11: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t12: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t13: use OAuth\\Common\\Http\\Uri\\Uri;","\t14: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t15: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t16: use OAuth\\Common\\Token\\TokenInterface;","\t17: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t44:         return new Uri($this->baseApiUri . '/oauth/authorize');","\t53:         return new Uri($this->baseApiUri . '/oauth/token');","\t76:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Facebook.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Exception\\Exception;","\t6: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t145:         return new Uri('https://www.facebook.com'.$this->getApiVersionString().'/dialog/oauth');","\t153:         return new Uri('https://graph.facebook.com'.$this->getApiVersionString().'/oauth/access_token');","\t170:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Foursquare.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t36:         return new Uri('https://foursquare.com/oauth2/authenticate');","\t44:         return new Uri('https://foursquare.com/oauth2/access_token');","\t60:         $token = new StdOAuth2Token();","\t63:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/GitHub.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t16:      * Defined scopes, see http://developer.github.com/v3/oauth/ for definitions.","\t146:         return new Uri('https://github.com/login/oauth/authorize');","\t154:         return new Uri('https://github.com/login/oauth/access_token');","\t178:         $token = new StdOAuth2Token();","\t181:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","\t194:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Google.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t7: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t8: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t9: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t10: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t11: use OAuth\\OAuth2\\Service\\Exception\\InvalidAccessTypeException;","\t12: use OAuth\\Common\\Http\\Uri\\Uri;","\t18:      * https://developers.google.com/oauthplayground/","\t141:             $this->baseApiUri = new Uri('https://www.googleapis.com/oauth2/v1/');","\t158:         return new Uri('https://accounts.google.com/o/oauth2/auth?access_type=' . $this->accessType);","\t166:         return new Uri('https://accounts.google.com/o/oauth2/token');","\t182:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Harvest.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Token\\TokenInterface;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t60:         return new Uri('https://api.harvestapp.com/oauth2/authorize');","\t68:         return new Uri('https://api.harvestapp.com/oauth2/token');","\t92:         $token = new StdOAuth2Token();","\t105:      * Refreshes an OAuth2 access token.","\t132:             $this->getExtraOAuthHeaders()","\t143:     protected function getExtraOAuthHeaders()","",""],"id":6},{"start":{"row":1117,"column":0},"end":{"row":1118,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Heroku.php:",""]},{"start":{"row":1118,"column":0},"end":{"row":1133,"column":0},"action":"insert","lines":["\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t17:  * @link https://devcenter.heroku.com/articles/oauth","\t23:      * @link https://devcenter.heroku.com/articles/oauth#scopes","\t54:         return new Uri('https://id.heroku.com/oauth/authorize');","\t62:         return new Uri('https://id.heroku.com/oauth/token');","\t91:         $token = new StdOAuth2Token();","\t111:     protected function getExtraOAuthHeaders()","",""]},{"start":{"row":1133,"column":0},"end":{"row":1146,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Hubic.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t68:         return new Uri('https://api.hubic.com/oauth/auth');","\t77:         return new Uri('https://api.hubic.com/oauth/token');","\t103:         $token = new StdOAuth2Token();","",""]},{"start":{"row":1146,"column":0},"end":{"row":1160,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Instagram.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t45:         return new Uri('https://api.instagram.com/oauth/authorize/');","\t53:         return new Uri('https://api.instagram.com/oauth/access_token');","\t77:         $token = new StdOAuth2Token();","\t80:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","",""]},{"start":{"row":1160,"column":0},"end":{"row":1173,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/JawboneUP.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t96:         return new Uri('https://jawbone.com/auth/oauth2/auth');","\t104:         return new Uri('https://jawbone.com/auth/oauth2/token');","\t128:         $token = new StdOAuth2Token();","",""]},{"start":{"row":1173,"column":0},"end":{"row":1186,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Linkedin.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t55:         return new Uri('https://www.linkedin.com/uas/oauth2/authorization');","\t63:         return new Uri('https://www.linkedin.com/uas/oauth2/accessToken');","\t87:         $token = new StdOAuth2Token();","",""]},{"start":{"row":1186,"column":0},"end":{"row":1203,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Mailchimp.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t42:         return new Uri('https://login.mailchimp.com/oauth2/authorize');","\t50:         return new Uri('https://login.mailchimp.com/oauth2/token');","\t69:         $token = new StdOAuth2Token($data['access_token']);","\t75:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","\t95:      * @param StdOAuth2Token $token","\t97:     protected function setBaseApiUri(StdOAuth2Token $token)","\t100:         $endpoint = 'https://login.mailchimp.com/oauth2/metadata?oauth_token='. $token->getAccessToken();","",""]}],[{"start":{"row":1203,"column":0},"end":{"row":1217,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Microsoft.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t45:      * https://github.com/Lusitanian/PHPoAuthLib/issues/214","\t72:         return new Uri('https://login.live.com/oauth20_authorize.srf');","\t80:         return new Uri('https://login.live.com/oauth20_token.srf');","\t104:         $token = new StdOAuth2Token();","",""],"id":7},{"start":{"row":1217,"column":0},"end":{"row":1218,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Nest.php:",""]},{"start":{"row":1218,"column":0},"end":{"row":1230,"column":0},"action":"insert","lines":["\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t56:         return new Uri('https://home.nest.com/login/oauth2');","\t64:         return new Uri('https://api.home.nest.com/oauth2/access_token');","\t90:         $token = new StdOAuth2Token();","",""]},{"start":{"row":1230,"column":0},"end":{"row":1297,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Netatmo.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t66:         return new Uri($this->baseApiUri.'oauth2/authorize');","\t75:         return new Uri($this->baseApiUri.'oauth2/token');","\t101:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/ParrotFlowerPower.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t19: use OAuth\\OAuth2\\Service\\Exception\\MissingRefreshTokenException;","\t20: use OAuth\\Common\\Token\\TokenInterface;","\t58:         return new Uri($this->baseApiUri.'oauth2/v1/authorize');","\t93:         $token = new StdOAuth2Token();","\t135:             $this->getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Paypal.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t87:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Pinterest.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t64:         return new Uri('https://api.pinterest.com/oauth/');","\t72:         return new Uri('https://api.pinterest.com/v1/oauth/token');","\t98:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Pocket.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t30:         return new Uri('https://getpocket.com/v3/oauth/request');","\t40:         return new Uri('https://getpocket.com/v3/oauth/authorize');","\t98:             $this->getExtraOAuthHeaders()","\t116:         $token = new StdOAuth2Token();","\t119:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","",""]},{"start":{"row":1297,"column":0},"end":{"row":1312,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Reddit.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t18:      * @link http://www.reddit.com/dev/api/oauth","\t47:             $this->baseApiUri = new Uri('https://oauth.reddit.com');","\t88:         $token = new StdOAuth2Token();","\t108:     protected function getExtraOAuthHeaders()","\t110:         // Reddit uses a Basic OAuth header","",""]},{"start":{"row":1312,"column":0},"end":{"row":1313,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/RunKeeper.php:",""]},{"start":{"row":1313,"column":0},"end":{"row":1323,"column":0},"action":"insert","lines":["\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t96:         $token = new StdOAuth2Token();","",""]},{"start":{"row":1323,"column":0},"end":{"row":1324,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Salesforce.php:",""]},{"start":{"row":1324,"column":0},"end":{"row":1457,"column":0},"action":"insert","lines":["\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\AbstractService;","\t6: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t29:         return new Uri('https://login.salesforce.com/services/oauth2/authorize');","\t37:         return new Uri('https://na1.salesforce.com/services/oauth2/token');","\t49:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t69:         $token = new StdOAuth2Token();","\t72:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","\t88:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/ServiceInterface.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t7: use OAuth\\Common\\Token\\TokenInterface;","\t8: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t9: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t10: use OAuth\\Common\\Service\\ServiceInterface as BaseServiceInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t14:  * Defines the common methods across OAuth 2 services.","\t21:     const AUTHORIZATION_METHOD_HEADER_OAUTH    = 0;","\t29:      * Retrieves and stores/returns the OAuth2 access token after a successful authorization.","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/SoundCloud.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t42:         return new Uri('https://api.soundcloud.com/oauth2/token');","\t58:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Spotify.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t84:         $token = new StdOAuth2Token();","\t107:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Strava.php:","\t8:  * @link    http://strava.github.io/api/v3/oauth/","\t11: namespace OAuth\\OAuth2\\Service;","\t13: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t14: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t15: use OAuth\\Common\\Http\\Uri\\Uri;","\t16: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t17: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t18: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t19: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t20: use OAuth\\OAuth2\\Service\\Exception\\InvalidAccessTypeException;","\t28:  * @link    http://strava.github.io/api/v3/oauth/","\t74:         return new Uri('https://www.strava.com/oauth/authorize?approval_prompt=' . $this->approvalPrompt);","\t82:         return new Uri('https://www.strava.com/oauth/token');","\t112:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Ustream.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t42:         return new Uri('https://www.ustream.tv/oauth2/authorize');","\t50:         return new Uri('https://www.ustream.tv/oauth2/token');","\t74:         $token = new StdOAuth2Token();","\t94:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Vimeo.php:","\t11: namespace OAuth\\OAuth2\\Service;","\t13: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t14: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t15: use OAuth\\Common\\Http\\Uri\\Uri;","\t16: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t17: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t18: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t19: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t84:         return new Uri('https://api.vimeo.com/oauth/authorize');","\t92:         return new Uri('https://api.vimeo.com/oauth/access_token');","\t122:         $token = new StdOAuth2Token();","\t144:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Vkontakte.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t61:         return new Uri('https://oauth.vk.com/authorize');","\t69:         return new Uri('https://oauth.vk.com/access_token');","\t85:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Yahoo.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t17:         return new Uri('https://api.login.yahoo.com/oauth2/request_auth');","\t25:         return new Uri('https://api.login.yahoo.com/oauth2/get_token');","\t49:         $token = new StdOAuth2Token();","\t69:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Yammer.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t34:         return new Uri('https://www.yammer.com/dialog/oauth');","\t42:         return new Uri('https://www.yammer.com/oauth2/access_token.json');","\t66:         $token = new StdOAuth2Token();","",""]},{"start":{"row":1457,"column":0},"end":{"row":1461,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Exception/InvalidAccessTypeException.php:","\t3: namespace OAuth\\OAuth2\\Service\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","",""]},{"start":{"row":1461,"column":0},"end":{"row":1464,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Exception/InvalidAuthorizationStateException.php:","\t3: namespace OAuth\\OAuth2\\Service\\Exception;","",""]},{"start":{"row":1464,"column":0},"end":{"row":1468,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Exception/InvalidScopeException.php:","\t8: namespace OAuth\\OAuth2\\Service\\Exception;","\t10: use OAuth\\Common\\Exception\\Exception;","",""]},{"start":{"row":1468,"column":0},"end":{"row":1472,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Exception/MissingRefreshTokenException.php:","\t8: namespace OAuth\\OAuth2\\Service\\Exception;","\t10: use OAuth\\Common\\Exception\\Exception;","",""]},{"start":{"row":1472,"column":0},"end":{"row":1479,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Token/StdOAuth2Token.php:","\t3: namespace OAuth\\OAuth2\\Token;","\t5: use OAuth\\Common\\Token\\AbstractToken;","\t8:  * Standard OAuth2 token implementation.","\t9:  * Implements OAuth\\OAuth2\\Token\\TokenInterface for any functionality that might not be provided by AbstractToken.","\t11: class StdOAuth2Token extends AbstractToken implements TokenInterface","",""]},{"start":{"row":1479,"column":0},"end":{"row":1483,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/OAuth2/Token/TokenInterface.php:","\t3: namespace OAuth\\OAuth2\\Token;","\t5: use OAuth\\Common\\Token\\TokenInterface as BaseTokenInterface;","",""]},{"start":{"row":1483,"column":0},"end":{"row":1488,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/bootstrap.php:","\t7:  * @category   OAuthTest","\t13: namespace OAuthTest;","\t21:  * Simple SPL autoloader for the OAuthTest mocks","",""]}],[{"start":{"row":1488,"column":0},"end":{"row":1493,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Mocks/Common/Service/Mock.php:","\t3: namespace OAuthTest\\Mocks\\Common\\Service;","\t5: use OAuth\\Common\\Service\\AbstractService;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","",""],"id":8},{"start":{"row":1493,"column":0},"end":{"row":1494,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Mocks/OAuth1/Service/Fake.php:",""]},{"start":{"row":1494,"column":0},"end":{"row":1502,"column":0},"action":"insert","lines":["\t3: namespace OAuthTest\\Mocks\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\AbstractService;","\t6: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t7: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t8: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t9: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","",""]},{"start":{"row":1502,"column":0},"end":{"row":1510,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Mocks/OAuth1/Service/Mock.php:","\t3: namespace OAuthTest\\Mocks\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\AbstractService;","\t6: use OAuth\\Common\\Http\\Uri\\Uri;","\t7: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t28:         return new StdOAuth1Token();","\t33:         return new StdOAuth1Token();","",""]},{"start":{"row":1510,"column":0},"end":{"row":1514,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Mocks/OAuth2/Service/Fake.php:","\t3: namespace OAuthTest\\Mocks\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\AbstractService;","",""]},{"start":{"row":1514,"column":0},"end":{"row":1521,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Mocks/OAuth2/Service/Mock.php:","\t3: namespace OAuthTest\\Mocks\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\AbstractService;","\t6: use OAuth\\Common\\Http\\Uri\\Uri;","\t7: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t28:         return new StdOAuth2Token();","",""]},{"start":{"row":1521,"column":0},"end":{"row":1522,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Unit/ServiceFactoryTest.php:",""]},{"start":{"row":1522,"column":0},"end":{"row":1642,"column":0},"action":"insert","lines":["\t3:  * @category   OAuth","\t11: namespace OAuth\\Unit;","\t13: use OAuth\\ServiceFactory;","\t18:      * @covers OAuth\\ServiceFactory::setHttpClient","\t25:             '\\\\OAuth\\\\ServiceFactory',","\t26:             $factory->setHttpClient($this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'))","\t31:      * @covers OAuth\\ServiceFactory::registerService","\t35:         $this->setExpectedException('\\\\OAuth\\Common\\Exception\\Exception');","\t42:      * @covers OAuth\\ServiceFactory::registerService","\t46:         $this->setExpectedException('\\\\OAuth\\Common\\Exception\\Exception');","\t49:         $factory->registerService('foo', 'OAuth\\\\ServiceFactory');","\t53:      * @covers OAuth\\ServiceFactory::registerService","\t55:     public function testRegisterServiceSuccessOAuth1()","\t60:             '\\\\OAuth\\\\ServiceFactory',","\t61:             $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake')","\t66:      * @covers OAuth\\ServiceFactory::registerService","\t68:     public function testRegisterServiceSuccessOAuth2()","\t73:             '\\\\OAuth\\\\ServiceFactory',","\t74:             $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake')","\t79:      * @covers OAuth\\ServiceFactory::createService","\t80:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t81:      * @covers OAuth\\ServiceFactory::buildV1Service","\t83:     public function testCreateServiceOAuth1NonRegistered()","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t90:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t93:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\Twitter', $service);","\t97:      * @covers OAuth\\ServiceFactory::registerService","\t98:      * @covers OAuth\\ServiceFactory::createService","\t99:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t100:      * @covers OAuth\\ServiceFactory::buildV1Service","\t102:     public function testCreateServiceOAuth1Registered()","\t106:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake');","\t110:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t111:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t114:         $this->assertInstanceOf('\\\\OAuth\\OAuth1\\Service\\\\ServiceInterface', $service);","\t115:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake', $service);","\t119:      * @covers OAuth\\ServiceFactory::registerService","\t120:      * @covers OAuth\\ServiceFactory::createService","\t121:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t122:      * @covers OAuth\\ServiceFactory::buildV1Service","\t124:     public function testCreateServiceOAuth1RegisteredAndNonRegisteredSameName()","\t128:         $factory->registerService('twitter', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake');","\t132:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t133:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t136:         $this->assertInstanceOf('\\\\OAuth\\OAuth1\\Service\\\\ServiceInterface', $service);","\t137:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake', $service);","\t141:      * @covers OAuth\\ServiceFactory::createService","\t142:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t143:      * @covers OAuth\\ServiceFactory::buildV2Service","\t144:      * @covers OAuth\\ServiceFactory::resolveScopes","\t146:     public function testCreateServiceOAuth2NonRegistered()","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t153:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t156:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\Facebook', $service);","\t160:      * @covers OAuth\\ServiceFactory::createService","\t161:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t162:      * @covers OAuth\\ServiceFactory::buildV2Service","\t163:      * @covers OAuth\\ServiceFactory::resolveScopes","\t165:     public function testCreateServiceOAuth2Registered()","\t169:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t173:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t174:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t177:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t178:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","\t182:      * @covers OAuth\\ServiceFactory::createService","\t183:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t184:      * @covers OAuth\\ServiceFactory::buildV2Service","\t185:      * @covers OAuth\\ServiceFactory::resolveScopes","\t187:     public function testCreateServiceOAuth2RegisteredAndNonRegisteredSameName()","\t191:         $factory->registerService('facebook', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t195:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t196:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t199:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t200:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","\t204:      * @covers OAuth\\ServiceFactory::registerService","\t205:      * @covers OAuth\\ServiceFactory::createService","\t206:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t207:      * @covers OAuth\\ServiceFactory::buildV1Service","\t211:         $this->setExpectedException('\\\\OAuth\\Common\\Exception\\Exception');","\t215:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake');","\t219:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t220:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t226:      * @covers OAuth\\ServiceFactory::createService","\t227:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t235:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t236:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t243:      * @covers OAuth\\ServiceFactory::registerService","\t244:      * @covers OAuth\\ServiceFactory::createService","\t245:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t246:      * @covers OAuth\\ServiceFactory::buildV2Service","\t247:      * @covers OAuth\\ServiceFactory::resolveScopes","\t249:     public function testCreateServicePrefersOauth2()","\t253:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake');","\t254:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t258:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t259:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t262:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t263:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","\t267:      * @covers OAuth\\ServiceFactory::createService","\t268:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t269:      * @covers OAuth\\ServiceFactory::buildV2Service","\t270:      * @covers OAuth\\ServiceFactory::resolveScopes","\t272:     public function testCreateServiceOAuth2RegisteredWithClassConstantsAsScope()","\t276:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t280:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t281:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t285:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t286:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","\t290:      * @covers OAuth\\ServiceFactory::createService","\t291:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t292:      * @covers OAuth\\ServiceFactory::buildV2Service","\t293:      * @covers OAuth\\ServiceFactory::resolveScopes","\t295:     public function testCreateServiceOAuth2RegisteredWithCustomScope()","\t299:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t303:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t304:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t308:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t309:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","","/vendor/lusitanian/oauth/tests/Unit/Common/AutoloaderTest.php:",""]},{"start":{"row":1642,"column":0},"end":{"row":1669,"column":0},"action":"insert","lines":["\t3: namespace OAuthTest\\Unit\\Commen\\Core;","\t5: use OAuth\\Common\\AutoLoader;","\t10:      * @covers OAuth\\Common\\AutoLoader::__construct","\t11:      * @covers OAuth\\Common\\AutoLoader::register","\t21:      * @covers OAuth\\Common\\AutoLoader::__construct","\t22:      * @covers OAuth\\Common\\AutoLoader::register","\t23:      * @covers OAuth\\Common\\AutoLoader::unregister","\t34:      * @covers OAuth\\Common\\AutoLoader::__construct","\t35:      * @covers OAuth\\Common\\AutoLoader::register","\t36:      * @covers OAuth\\Common\\AutoLoader::load","\t50:      * @covers OAuth\\Common\\AutoLoader::__construct","\t51:      * @covers OAuth\\Common\\AutoLoader::register","\t52:      * @covers OAuth\\Common\\AutoLoader::load","\t66:      * @covers OAuth\\Common\\AutoLoader::__construct","\t67:      * @covers OAuth\\Common\\AutoLoader::register","\t68:      * @covers OAuth\\Common\\AutoLoader::load","\t82:      * @covers OAuth\\Common\\AutoLoader::__construct","\t83:      * @covers OAuth\\Common\\AutoLoader::register","\t84:      * @covers OAuth\\Common\\AutoLoader::load","\t98:      * @covers OAuth\\Common\\AutoLoader::__construct","\t99:      * @covers OAuth\\Common\\AutoLoader::register","\t100:      * @covers OAuth\\Common\\AutoLoader::load","\t114:      * @covers OAuth\\Common\\AutoLoader::__construct","\t115:      * @covers OAuth\\Common\\AutoLoader::register","\t116:      * @covers OAuth\\Common\\AutoLoader::load","","/vendor/lusitanian/oauth/tests/Unit/Common/Consumer/CredentialsTest.php:",""]},{"start":{"row":1669,"column":0},"end":{"row":1680,"column":0},"action":"insert","lines":["\t3: namespace OAuth\\Unit\\Common\\Consumer;","\t5: use OAuth\\Common\\Consumer\\Credentials;","\t10:      * @covers OAuth\\Common\\Consumer\\Credentials::__construct","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface', $credentials);","\t20:      * @covers OAuth\\Common\\Consumer\\Credentials::__construct","\t21:      * @covers OAuth\\Common\\Consumer\\Credentials::getConsumerId","\t31:      * @covers OAuth\\Common\\Consumer\\Credentials::__construct","\t32:      * @covers OAuth\\Common\\Consumer\\Credentials::getConsumerSecret","\t42:      * @covers OAuth\\Common\\Consumer\\Credentials::__construct","\t43:      * @covers OAuth\\Common\\Consumer\\Credentials::getCallbackUrl","",""]},{"start":{"row":1680,"column":0},"end":{"row":1689,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Unit/Common/Http/HttpClientsTest.php:","\t4:  * @category   OAuth","\t11: namespace OAuth\\Unit\\Common\\Http;","\t13: use OAuth\\Common\\Http\\Uri\\Uri;","\t14: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t15: use OAuth\\Common\\Http\\Client;","\t20:      * @var object|\\OAuth\\Common\\Http\\Client\\ClientInterface[]","\t67:             $this->setExpectedException('OAuth\\Common\\Http\\Exception\\TokenResponseException');","",""]},{"start":{"row":1689,"column":0},"end":{"row":1690,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Unit/Common/Http/Client/AbstractClientTest.php:",""]},{"start":{"row":1690,"column":0},"end":{"row":1708,"column":0},"action":"insert","lines":["\t3: namespace OAuthTest\\Unit\\Common\\Http;","\t8:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::__construct","\t12:         $client = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient');","\t14:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface', $client);","\t18:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::__construct","\t19:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::setMaxRedirects","\t23:         $client = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient');","\t25:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient', $client->setMaxRedirects(10));","\t26:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface', $client->setMaxRedirects(10));","\t30:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::__construct","\t31:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::setTimeout","\t35:         $client = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient');","\t37:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient', $client->setTimeout(25));","\t38:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface', $client->setTimeout(25));","\t42:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::__construct","\t43:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::normalizeHeaders","\t47:         $client = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient');","",""]}],[{"start":{"row":1708,"column":0},"end":{"row":1745,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Unit/Common/Http/Client/CurlClientTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Client\\CurlClient;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t17:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient', $client);","\t21:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::setForceSSL3","\t27:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\CurlClient', $client->setForceSSL3(true));","\t31:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t40:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t48:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t57:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t65:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t66:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t70:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t89:         $this->assertSame('PHPoAuthLib', $response['headers']['User-Agent']);","\t93:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t94:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t98:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t121:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t125:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t148:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t152:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t176:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t180:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t203:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t207:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t232:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t236:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t261:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t265:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t292:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t296:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t328:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t332:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t334:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t360:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","",""],"id":9},{"start":{"row":1745,"column":0},"end":{"row":1780,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Unit/Common/Http/Client/StreamClientTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Client\\StreamClient;","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient', $client);","\t20:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t29:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t37:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t54:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t55:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t59:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t78:         $this->assertSame('PHPoAuthLib', $response['headers']['User-Agent']);","\t82:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t83:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t87:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t110:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t111:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t115:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t138:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t139:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t143:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t167:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t168:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t172:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t195:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t196:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t200:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t225:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t226:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t230:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t255:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t256:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t260:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t262:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","",""]},{"start":{"row":1780,"column":0},"end":{"row":1781,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Unit/Common/Http/Uri/UriFactoryTest.php:",""]},{"start":{"row":1781,"column":0},"end":{"row":1880,"column":0},"action":"insert","lines":["\t3: namespace OAuthTest\\Unit\\Common\\Http\\Uri;","\t5: use OAuth\\Common\\Http\\Uri\\UriFactory;","\t6: use OAuth\\Common\\Http\\Uri\\Uri;","\t17:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriFactoryInterface', $factory);","\t21:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t22:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t31:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t39:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t40:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t41:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t42:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t43:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t44:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t45:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t46:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t60:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t70:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t71:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t72:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t73:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t74:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t75:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t76:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t77:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t91:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t99:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t100:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t101:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t102:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t103:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t104:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t105:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t106:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t120:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t128:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t129:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t130:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t131:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t132:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t133:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t134:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t135:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t148:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t156:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t157:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t158:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t159:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t160:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t161:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t162:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t163:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t176:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t184:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t185:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t186:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t187:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t188:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t189:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t190:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t191:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t204:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t212:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t213:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t214:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t215:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t216:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t217:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t218:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t219:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t234:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t235:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t236:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t237:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t238:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t239:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t240:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t241:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t254:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t262:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t263:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t264:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t265:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t266:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t267:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t268:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t269:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t281:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t289:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t290:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t291:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t292:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t293:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t294:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t295:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t296:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t308:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t316:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromAbsolute","\t325:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","",""]}],[{"start":{"row":1880,"column":0},"end":{"row":2774,"column":62},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Unit/Common/Http/Uri/UriTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Http\\Uri;","\t5: use OAuth\\Common\\Http\\Uri\\Uri;","\t10:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","\t20:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t21:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t32:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t33:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t43:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t44:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t45:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getScheme","\t55:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t56:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t57:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t58:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t59:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getUserInfo","\t69:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t70:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t71:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t72:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t73:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getUserInfo","\t83:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t84:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t85:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t86:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t87:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawUserInfo","\t97:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t98:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t99:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t100:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t101:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawUserInfo","\t111:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t112:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t113:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getHost","\t123:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t124:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t125:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPort","\t135:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t136:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t137:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPort","\t147:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t148:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t149:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPort","\t159:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t160:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t161:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPath","\t171:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t172:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t173:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPath","\t183:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t184:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t185:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPath","\t195:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t196:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t197:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getQuery","\t207:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t208:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t209:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getQuery","\t219:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t220:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t221:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getFragment","\t231:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t232:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t233:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getFragment","\t243:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t244:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t245:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t255:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t256:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t257:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t267:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t268:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t269:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t270:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t271:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t281:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t282:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t283:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t284:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t285:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t295:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t296:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t297:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t298:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t299:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t309:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t310:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t311:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t321:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t322:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t323:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t333:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t334:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t335:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t336:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t337:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t347:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t348:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t349:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t350:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t351:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t361:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t362:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t363:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t364:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t365:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t375:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t376:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t377:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t387:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t388:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t389:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t390:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t391:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t392:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t402:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t403:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t404:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t414:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t415:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t416:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t426:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t427:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t428:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t438:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t439:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t440:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t450:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t451:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t452:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t462:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t463:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t464:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRelativeUri","\t474:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t475:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t476:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRelativeUri","\t486:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t487:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t488:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRelativeUri","\t498:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t499:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t500:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t510:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t511:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t512:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t513:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t514:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t515:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t525:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t526:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t527:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t537:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t538:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t539:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t549:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t550:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t551:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t561:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t562:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t563:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t573:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t574:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t575:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t585:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t586:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t587:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPath","\t588:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t599:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t600:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t601:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPath","\t602:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t613:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t614:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t615:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPath","\t616:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t627:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t628:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t629:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setQuery","\t630:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t641:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t642:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t643:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setQuery","\t644:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t655:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t656:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t657:      * @covers OAuth\\Common\\Http\\Uri\\Uri::addToQuery","\t658:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t669:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t670:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t671:      * @covers OAuth\\Common\\Http\\Uri\\Uri::addToQuery","\t672:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t683:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t684:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t685:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setFragment","\t686:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t697:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t698:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t699:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setFragment","\t700:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t711:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t712:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t713:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setScheme","\t714:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t725:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t726:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t727:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setScheme","\t728:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t739:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t740:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t741:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t742:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t753:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t754:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t755:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t756:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t757:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t768:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t769:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t770:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t771:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t782:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t783:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t784:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t785:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t796:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t797:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t798:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t799:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t810:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t811:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t812:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t813:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t824:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t825:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t826:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t827:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t838:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t839:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t840:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setHost","\t841:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t852:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t853:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t854:      * @covers OAuth\\Common\\Http\\Uri\\Uri::hasExplicitTrailingHostSlash","\t864:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t865:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t866:      * @covers OAuth\\Common\\Http\\Uri\\Uri::hasExplicitTrailingHostSlash","\t876:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t877:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t878:      * @covers OAuth\\Common\\Http\\Uri\\Uri::hasExplicitPortSpecified","\t888:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t889:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t890:      * @covers OAuth\\Common\\Http\\Uri\\Uri::hasExplicitPortSpecified","","/vendor/lusitanian/oauth/tests/Unit/Common/Service/AbstractServiceTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Service;","\t5: use OAuthTest\\Mocks\\Common\\Service\\Mock;","\t10:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t15:             '\\\\OAuth\\\\Common\\\\Service\\\\AbstractService',","\t17:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t18:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t19:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t23:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Service\\\\ServiceInterface', $service);","\t27:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t28:      * @covers OAuth\\Common\\Service\\AbstractService::getStorage","\t33:             '\\\\OAuth\\\\Common\\\\Service\\\\AbstractService',","\t35:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t36:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t37:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t41:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $service->getStorage());","\t45:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t46:      * @covers OAuth\\Common\\Service\\AbstractService::service","\t51:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t52:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t53:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t60:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t61:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t66:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t67:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t68:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t72:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t73:             $service->testDetermineRequestUriFromPath($this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'))","\t78:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t79:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t84:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t85:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t86:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t91:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","\t96:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t97:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t104:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t109:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","\t114:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t115:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t119:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Exception\\\\Exception');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t131:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t132:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t137:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t138:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t139:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t144:             new \\OAuth\\Common\\Http\\Uri\\Uri('https://example.com')","\t147:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","\t152:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t153:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t159:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t165:             new \\OAuth\\Common\\Http\\Uri\\Uri('https://example.com')","\t168:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/MemoryTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Storage;","\t5: use OAuth\\Common\\Storage\\Memory;","\t10:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t20:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t21:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t28:             '\\\\OAuth\\\\Common\\\\Storage\\\\Memory',","\t29:             $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'))","\t34:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t35:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t36:      * @covers OAuth\\Common\\Storage\\Memory::retrieveAccessToken","\t37:      * @covers OAuth\\Common\\Storage\\Memory::hasAccessToken","\t43:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t45:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface', $storage->retrieveAccessToken('foo'));","\t49:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t50:      * @covers OAuth\\Common\\Storage\\Memory::retrieveAccessToken","\t51:      * @covers OAuth\\Common\\Storage\\Memory::hasAccessToken","\t55:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Storage\\\\Exception\\\\TokenNotFoundException');","\t63:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t64:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t65:      * @covers OAuth\\Common\\Storage\\Memory::hasAccessToken","\t71:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t77:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t78:      * @covers OAuth\\Common\\Storage\\Memory::hasAccessToken","\t88:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t89:      * @covers OAuth\\Common\\Storage\\Memory::clearToken","\t95:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Memory', $storage->clearToken('foo'));","\t99:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t100:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t101:      * @covers OAuth\\Common\\Storage\\Memory::clearToken","\t107:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t110:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Memory', $storage->clearToken('foo'));","\t115:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t116:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t117:      * @covers OAuth\\Common\\Storage\\Memory::clearAllTokens","\t123:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t124:         $storage->storeAccessToken('bar', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t128:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Memory', $storage->clearAllTokens());","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/RedisTest.php:","\t4:  * @category   OAuth","\t11: namespace OAuth\\Unit\\Common\\Storage;","\t13: use OAuth\\Common\\Storage\\Redis;","\t15: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t57:         $token_1 = new StdOAuth2Token('access_1', 'refresh_1', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t58:         $token_2 = new StdOAuth2Token('access_2', 'refresh_2', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t92:         $token = new StdOAuth2Token('access', 'refresh', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t99:         $this->setExpectedException('OAuth\\Common\\Storage\\Exception\\TokenNotFoundException');","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/SessionTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Storage;","\t5: use OAuth\\Common\\Storage\\Session;","\t10:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t18:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t22:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t32:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t36:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t46:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t50:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t58:         $_SESSION['lusitanian_oauth_token'] = array();","\t62:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t66:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t67:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t76:             '\\\\OAuth\\\\Common\\\\Storage\\\\Session',","\t77:             $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'))","\t82:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t83:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t91:         $_SESSION['lusitanian_oauth_token'] = 'foo';","\t94:             '\\\\OAuth\\\\Common\\\\Storage\\\\Session',","\t95:             $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'))","\t100:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t101:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t102:      * @covers OAuth\\Common\\Storage\\Session::retrieveAccessToken","\t103:      * @covers OAuth\\Common\\Storage\\Session::hasAccessToken","\t111:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t113:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface', $storage->retrieveAccessToken('foo'));","\t117:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t118:      * @covers OAuth\\Common\\Storage\\Session::retrieveAccessToken","\t119:      * @covers OAuth\\Common\\Storage\\Session::hasAccessToken","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Storage\\\\Exception\\\\TokenNotFoundException');","\t133:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t134:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t135:      * @covers OAuth\\Common\\Storage\\Session::hasAccessToken","\t143:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t149:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t150:      * @covers OAuth\\Common\\Storage\\Session::hasAccessToken","\t162:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t163:      * @covers OAuth\\Common\\Storage\\Session::clearToken","\t171:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Session', $storage->clearToken('foo'));","\t175:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t176:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t177:      * @covers OAuth\\Common\\Storage\\Session::clearToken","\t185:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t188:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Session', $storage->clearToken('foo'));","\t193:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t194:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t195:      * @covers OAuth\\Common\\Storage\\Session::clearAllTokens","\t203:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t204:         $storage->storeAccessToken('bar', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t208:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Session', $storage->clearAllTokens());","\t214:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t215:      * @covers OAuth\\Common\\Storage\\Session::__destruct","\t227:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t228:      * @covers OAuth\\Common\\Storage\\Session::retrieveAccessToken","\t234:         $mock = $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('__sleep'));","\t243:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', $retrievedToken);","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/StorageTest.php:","\t4:  * @category   OAuth","\t12: namespace OAuth\\Unit\\Common\\Storage;","\t14: use \\OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t29:         $token_1 = new StdOAuth2Token('access_1', 'refresh_1', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t30:         $token_2 = new StdOAuth2Token('access_2', 'refresh_2', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t64:         $token = new StdOAuth2Token('access', 'refresh', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t71:         $this->setExpectedException('OAuth\\Common\\Storage\\Exception\\TokenNotFoundException');","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/SymfonySessionTest.php:","\t4:  * @category   OAuth","\t11: namespace OAuth\\Unit\\Common\\Storage;","\t13: use OAuth\\Common\\Storage\\SymfonySession;","\t14: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t44:         $token = new StdOAuth2Token('access', 'refresh', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t66:         $token_1 = new StdOAuth2Token('access_1', 'refresh_1', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t67:         $token_2 = new StdOAuth2Token('access_2', 'refresh_2', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t101:         $token = new StdOAuth2Token('access', 'refresh', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t108:         $this->setExpectedException('OAuth\\Common\\Storage\\Exception\\TokenNotFoundException');","","/vendor/lusitanian/oauth/tests/Unit/Common/Token/AbstractTokenTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Token;","\t5: use \\OAuth\\Common\\Token\\AbstractToken;","\t10:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t14:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface', $token);","\t20:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t21:      * @covers OAuth\\Common\\Token\\AbstractToken::getAccessToken","\t25:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t31:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t32:      * @covers OAuth\\Common\\Token\\AbstractToken::getAccessToken","\t36:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo'));","\t42:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t43:      * @covers OAuth\\Common\\Token\\AbstractToken::getAccessToken","\t44:      * @covers OAuth\\Common\\Token\\AbstractToken::setAccessToken","\t48:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t56:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t57:      * @covers OAuth\\Common\\Token\\AbstractToken::getRefreshToken","\t61:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t67:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t68:      * @covers OAuth\\Common\\Token\\AbstractToken::getRefreshToken","\t72:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar'));","\t78:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t79:      * @covers OAuth\\Common\\Token\\AbstractToken::getRefreshToken","\t80:      * @covers OAuth\\Common\\Token\\AbstractToken::setRefreshToken","\t84:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t92:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t93:      * @covers OAuth\\Common\\Token\\AbstractToken::getExtraParams","\t97:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t103:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t104:      * @covers OAuth\\Common\\Token\\AbstractToken::getExtraParams","\t108:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar', null, array('foo', 'bar')));","\t114:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t115:      * @covers OAuth\\Common\\Token\\AbstractToken::setExtraParams","\t116:      * @covers OAuth\\Common\\Token\\AbstractToken::getExtraParams","\t120:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t128:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t129:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t130:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t134:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t140:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t141:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t142:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t146:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar', 0));","\t152:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t153:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t154:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t158:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar', AbstractToken::EOL_NEVER_EXPIRES));","\t164:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t165:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t166:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t170:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar', 5 * 60));","\t176:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t177:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t178:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t179:      * @covers OAuth\\Common\\Token\\AbstractToken::setEndOfLife","\t183:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/AbstractServiceTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuthTest\\Mocks\\OAuth1\\Service\\Mock;","\t10:      * @covers OAuth\\OAuth1\\Service\\AbstractService::__construct","\t15:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService',","\t17:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t18:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t19:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t20:                 $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t21:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t25:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t29:      * @covers OAuth\\OAuth1\\Service\\AbstractService::__construct","\t34:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService',","\t36:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t37:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t38:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t39:                 $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t40:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t44:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Service\\\\AbstractService', $service);","\t48:      * @covers OAuth\\OAuth1\\Service\\AbstractService::requestRequestToken","\t49:      * @covers OAuth\\OAuth1\\Service\\AbstractService::buildAuthorizationHeaderForTokenRequest","\t50:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getBasicAuthorizationHeaderInfo","\t51:      * @covers OAuth\\OAuth1\\Service\\AbstractService::generateNonce","\t52:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getSignatureMethod","\t53:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getVersion","\t54:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getExtraOAuthHeaders","\t55:      * @covers OAuth\\OAuth1\\Service\\AbstractService::parseRequestTokenResponse","\t59:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t65:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t67:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t68:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t69:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t72:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t76:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAuthorizationUri","\t77:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAuthorizationEndpoint","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t85:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t86:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t93:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAuthorizationUri","\t94:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAuthorizationEndpoint","\t99:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t113:      * @covers OAuth\\OAuth1\\Service\\AbstractService::requestAccessToken","\t114:      * @covers OAuth\\OAuth1\\Service\\AbstractService::service","\t115:      * @covers OAuth\\OAuth1\\Service\\AbstractService::buildAuthorizationHeaderForAPIRequest","\t116:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getBasicAuthorizationHeaderInfo","\t117:      * @covers OAuth\\OAuth1\\Service\\AbstractService::generateNonce","\t118:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getSignatureMethod","\t119:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getVersion","\t120:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAccessTokenEndpoint","\t121:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getExtraOAuthHeaders","\t122:      * @covers OAuth\\OAuth1\\Service\\AbstractService::parseAccessTokenResponse","\t126:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t131:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t134:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t138:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t141:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar'));","\t149:      * @covers OAuth\\OAuth1\\Service\\AbstractService::requestAccessToken","\t150:      * @covers OAuth\\OAuth1\\Service\\AbstractService::service","\t151:      * @covers OAuth\\OAuth1\\Service\\AbstractService::buildAuthorizationHeaderForAPIRequest","\t152:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getBasicAuthorizationHeaderInfo","\t153:      * @covers OAuth\\OAuth1\\Service\\AbstractService::generateNonce","\t154:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getSignatureMethod","\t155:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getVersion","\t156:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAccessTokenEndpoint","\t157:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getExtraOAuthHeaders","\t158:      * @covers OAuth\\OAuth1\\Service\\AbstractService::parseAccessTokenResponse","\t162:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t169:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t173:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t176:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t177:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t180:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t184:      * @covers OAuth\\OAuth1\\Service\\AbstractService::request","\t185:      * @covers OAuth\\OAuth1\\Service\\AbstractService::determineRequestUriFromPath","\t186:      * @covers OAuth\\OAuth1\\Service\\AbstractService::service","\t187:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getExtraApiHeaders","\t188:      * @covers OAuth\\OAuth1\\Service\\AbstractService::buildAuthorizationHeaderForAPIRequest","\t189:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getBasicAuthorizationHeaderInfo","\t190:      * @covers OAuth\\OAuth1\\Service\\AbstractService::generateNonce","\t191:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getSignatureMethod","\t192:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getVersion","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t199:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t202:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t206:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t209:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t210:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t219:      * @covers OAuth\\OAuth1\\Service\\AbstractService::request","\t223:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t226:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t228:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t232:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t235:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t236:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/BitBucketTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\BitBucket;","\t10:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://bitbucket.org/!api/1.0/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://bitbucket.org/!api/1.0/oauth/authenticate',","\t94:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://bitbucket.org/!api/1.0/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/EtsyTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Etsy;","\t10:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://openapi.etsy.com/v2/oauth/request_token',","\t76:             'https://openapi.etsy.com/v2/oauth/request_token?scope=email_r%20cart_rw',","\t83:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t84:      * @covers OAuth\\OAuth1\\Service\\Etsy::getAuthorizationEndpoint","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t90:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t91:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t92:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t102:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t103:      * @covers OAuth\\OAuth1\\Service\\Etsy::getAccessTokenEndpoint","\t108:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t109:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t110:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t111:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t115:             'https://openapi.etsy.com/v2/oauth/access_token',","\t121:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t122:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t123:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t127:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t131:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t133:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t134:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t137:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t143:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t144:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t145:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t149:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t153:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t155:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t156:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t159:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t165:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t166:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t167:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t171:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t175:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t177:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t178:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t181:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t187:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t188:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t189:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t193:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t195:             'oauth_callback_confirmed=false'","\t199:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t201:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t205:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t211:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t212:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t213:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t214:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseAccessTokenResponse","\t218:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t220:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t224:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t226:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t227:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t230:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t234:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t235:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t236:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseAccessTokenResponse","\t240:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t243:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t245:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t249:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t252:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t255:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t261:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t262:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t263:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseAccessTokenResponse","\t267:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t269:             'oauth_token=foo&oauth_token_secret=bar'","\t272:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t274:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t278:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t281:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t284:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/FitBitTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\FitBit;","\t10:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://api.fitbit.com/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\FitBit::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://www.fitbit.com/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\FitBit::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://api.fitbit.com/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTo"],"id":10},{"start":{"row":2774,"column":62},"end":{"row":3419,"column":0},"action":"insert","lines":["kenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/FiveHundredPx.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\FiveHundredPx;","\t10:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://api.500px.com/v1/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://api.500px.com/v1/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://api.500px.com/v1/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/FlickrTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Flickr;","\t10:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://www.flickr.com/services/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\Flickr::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://www.flickr.com/services/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\Flickr::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://www.flickr.com/services/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t280:      * @covers OAuth\\OAuth1\\Service\\Flickr::request","\t284:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t287:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t289:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t293:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t296:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t297:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/QuickBooksTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t6: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t7: use OAuth\\Common\\Token\\TokenInterface;","\t8: use OAuth\\OAuth1\\Service\\QuickBooks;","\t16:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface',","\t25:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService',","\t33:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t34:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t35:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t36:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t37:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t41:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService',","\t50:             'https://oauth.intuit.com/oauth/v1/get_request_token',","\t68:             'https://oauth.intuit.com/oauth/v1/get_access_token',","\t74:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t85:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t96:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t107:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t113:             'oauth_callback_confirmed=false'","\t122:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t126:             '\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token',","\t132:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t137:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t148:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t151:             'oauth_token=foo&oauth_token_secret=bar'","\t155:             '\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token',","\t167:                 '\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'","\t173:                 '\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'","\t178:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t181:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t192:             '\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'","\t204:             '\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/ScoopItTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\ScoopIt;","\t10:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://www.scoop.it/oauth/request',","\t75:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://www.scoop.it/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://www.scoop.it/oauth/access',","\t113:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t280:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::request","\t284:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t287:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t289:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t293:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t296:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t297:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/TumblrTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Tumblr;","\t10:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://www.tumblr.com/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://www.tumblr.com/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://www.tumblr.com/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/TwitterTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Twitter;","\t10:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://api.twitter.com/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\Twitter::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t90:                 array(\\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHENTICATE, \\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHORIZE)","\t94:         $service->setAuthorizationEndpoint( \\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHORIZE );","\t99:                 array(\\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHENTICATE, \\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHORIZE)","\t105:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t106:      * @covers OAuth\\OAuth1\\Service\\Twitter::setAuthorizationEndpoint","\t111:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t112:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t113:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t114:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t117:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Exception\\\\Exception');","\t123:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t124:      * @covers OAuth\\OAuth1\\Service\\Twitter::getAccessTokenEndpoint","\t129:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t131:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t132:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t136:             'https://api.twitter.com/oauth/access_token',","\t142:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t143:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t144:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t148:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t154:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t155:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t158:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t164:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t165:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t166:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t170:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t174:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t176:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t177:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t180:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t186:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t187:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t188:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t192:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t196:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t198:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t199:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t202:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t208:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t209:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t210:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t214:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t216:             'oauth_callback_confirmed=false'","\t220:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t222:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t223:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t226:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t232:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t233:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t234:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t235:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t239:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t241:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t245:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t247:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t248:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t251:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t255:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t256:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t257:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t261:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t282:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t283:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t284:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t288:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t290:             'oauth_token=foo&oauth_token_secret=bar'","\t293:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t295:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t299:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t302:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t305:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t309:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t313:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t315:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t317:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t318:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t321:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t328:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t332:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t334:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t336:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t337:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t340:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t347:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t349:     public function testParseAccessTokenErrorItsMissingOauthToken()","\t351:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t353:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t355:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t356:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t359:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t362:         $method->invokeArgs($service, array(\"oauth_token_secret=1\"));","\t366:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t368:     public function testParseAccessTokenErrorItsMissingOauthTokenSecret()","\t370:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t372:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t374:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t375:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t378:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t381:         $method->invokeArgs($service, array(\"oauth_token=1\"));","",""]}],[{"start":{"row":3419,"column":0},"end":{"row":4258,"column":40},"action":"insert","lines":["/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/XingTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Xing;","\t18:         $this->client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t19:         $this->storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t22:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t25:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t30:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t35:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $this->xing","\t40:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t45:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $this->xing","\t50:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t55:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t58:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t59:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t62:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t66:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t67:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t78:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t79:      * @covers OAuth\\OAuth1\\Service\\Xing::getAuthorizationEndpoint","\t90:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t91:      * @covers OAuth\\OAuth1\\Service\\Xing::getAccessTokenEndpoint","\t102:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t103:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t104:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t113:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t119:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t120:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t121:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t130:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t136:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t137:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t138:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t154:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t155:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t162:             ->will($this->returnValue('oauth_callback_confirmed=false'));","\t164:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t170:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t171:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t172:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t173:      * @covers OAuth\\OAuth1\\Service\\Xing::parseAccessTokenResponse","\t181:                 'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t185:             '\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token',","\t191:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t192:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t193:      * @covers OAuth\\OAuth1\\Service\\Xing::parseAccessTokenResponse","\t200:             ->will($this->returnValue('{\"message\":\"Invalid OAuth signature\",\"error_name\":\"INVALID_OAUTH_SIGNATURE\"}'));","\t202:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t209:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t215:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t216:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t217:      * @covers OAuth\\OAuth1\\Service\\Xing::parseAccessTokenResponse","\t224:             ->will($this->returnValue('oauth_token=foo&oauth_token_secret=bar'));","\t226:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t235:             '\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token',","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/YahooTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Yahoo;","\t10:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://api.login.yahoo.com/oauth/v2/get_request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://api.login.yahoo.com/oauth/v2/request_auth',","\t94:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://api.login.yahoo.com/oauth/v2/get_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t280:      * @covers OAuth\\OAuth1\\Service\\Yahoo::request","\t284:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t287:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t289:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t293:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t296:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t297:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Signature/SignatureTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Signature;","\t5: use OAuth\\OAuth1\\Signature\\Signature;","\t10:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t14:         $signature = new Signature($this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'));","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface', $signature);","\t20:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t21:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t25:         $signature = new Signature($this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'));","\t31:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t32:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t36:         $signature = new Signature($this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'));","\t42:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t43:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t44:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t45:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t46:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t47:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t48:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t52:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t63:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t81:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t82:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t83:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t84:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t85:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t86:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t87:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t91:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t102:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t120:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t121:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t122:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t123:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t124:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t125:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t126:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t130:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t141:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t159:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t160:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t161:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t162:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t163:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t164:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t165:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t169:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t180:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t201:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t202:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t203:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t204:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t205:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t206:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t207:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t211:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t222:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t243:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t244:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t245:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t246:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t247:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t248:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t249:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t253:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t263:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t284:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t285:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t286:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t287:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t288:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t289:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t290:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t294:         $this->setExpectedException('\\\\OAuth\\\\OAuth1\\\\Signature\\\\Exception\\\\UnsupportedHashAlgorithmException');","\t296:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t306:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Token/StdOAuth1TokenTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Token;","\t5: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: class StdOAuth1TokenTest extends \\PHPUnit_Framework_TestCase","\t14:         $token = new StdOAuth1Token();","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface', $token);","\t17:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', $token);","\t21:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setRequestToken","\t25:         $token = new StdOAuth1Token();","\t31:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setRequestToken","\t32:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::getRequestToken","\t36:         $token = new StdOAuth1Token();","\t43:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setRequestTokenSecret","\t47:         $token = new StdOAuth1Token();","\t53:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setRequestTokenSecret","\t54:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::getRequestTokenSecret","\t58:         $token = new StdOAuth1Token();","\t65:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setAccessTokenSecret","\t69:         $token = new StdOAuth1Token();","\t75:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setAccessTokenSecret","\t76:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::getAccessTokenSecret","\t80:         $token = new StdOAuth1Token();","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/AbstractServiceTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuthTest\\Mocks\\OAuth2\\Service\\Mock;","\t6: use OAuth\\Common\\Http\\Uri\\Uri;","\t7: use OAuth\\Common\\Token\\TokenInterface;","\t12:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t17:             '\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService',","\t19:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t20:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t21:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t26:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t30:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t35:             '\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService',","\t37:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t38:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t39:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t44:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Service\\\\AbstractService', $service);","\t48:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t53:             '\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService',","\t55:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t56:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t57:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t59:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t63:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Service\\\\AbstractService', $service);","\t67:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t68:      * @covers OAuth\\OAuth2\\Service\\AbstractService::isValidScope","\t72:         $this->setExpectedException('\\\\OAuth\\\\OAuth2\\\\Service\\\\Exception\\\\InvalidScopeException');","\t75:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t83:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t84:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationUri","\t85:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationEndpoint","\t89:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t95:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t96:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t106:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t107:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationUri","\t108:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationEndpoint","\t112:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t118:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t119:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t129:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t130:      * @covers OAuth\\OAuth2\\Service\\AbstractService::isValidScope","\t131:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationUri","\t132:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationEndpoint","\t136:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t154:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t155:      * @covers OAuth\\OAuth2\\Service\\AbstractService::requestAccessToken","\t156:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAccessTokenEndpoint","\t157:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraOAuthHeaders","\t158:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t159:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t165:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t166:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t169:         $this->assertInstanceof('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('code'));","\t173:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t175:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t181:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t184:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t189:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t193:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Token\\\\Exception\\\\ExpiredTokenException', 'Token expired on 03/26/1984 at 12:00:00 AM');","\t199:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t200:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t201:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t202:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationMethod","\t203:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t204:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t205:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraApiHeaders","\t207:     public function testRequestOauthAuthorizationMethod()","\t209:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t216:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t220:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t228:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t232:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t233:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t234:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t235:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationMethod","\t236:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t237:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t238:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraApiHeaders","\t242:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t245:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t249:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t253:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t267:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t268:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t269:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t270:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationMethod","\t271:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t272:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t273:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraApiHeaders","\t277:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t280:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t284:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t288:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t298:         $this->assertSame('oauth2_access_token=foo', $absoluteUri['query']);","\t302:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t303:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t304:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t305:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationMethod","\t306:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t307:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t308:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraApiHeaders","\t312:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t315:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t319:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t323:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t337:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t338:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getStorage","\t343:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t344:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t345:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t348:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $service->getStorage());","\t352:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t353:      * @covers OAuth\\OAuth2\\Service\\AbstractService::refreshAccessToken","\t354:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAccessTokenEndpoint","\t355:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraOAuthHeaders","\t356:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t361:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t362:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t363:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t366:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token');","\t369:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->refreshAccessToken($token));","\t373:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t374:      * @covers OAuth\\OAuth2\\Service\\AbstractService::isValidScope","\t379:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t380:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t381:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t388:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t389:      * @covers OAuth\\OAuth2\\Service\\AbstractService::isValidScope","\t394:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t395:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t396:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/AmazonTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Amazon;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Amazon::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t70:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Amazon::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Amazon::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/BitlyTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Bitly;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Bitly::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://bitly.com/oauth/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Bitly::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api-ssl.bitly.com/oauth/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Bitly::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Bitly::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Bitly::parseAccessTokenResponse","\t135:      * @covers OAuth\\OAuth2\\Service\\Bitly::requestAccessToken","\t139:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t148:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/Bitrix24.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Bitrix24;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t20:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t23:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t27:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t28:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::getAuthorizationEndpoint","\t33:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t34:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t35:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t37:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t40:         $this->assertSame('https://bitrix24.com/oauth/authorize/', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t44:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t45:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::getAccessTokenEndpoint","\t50:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t51:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t52:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t54:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t57:         $this->assertSame('https://bitrix24.com/oauth/token/', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t61:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t62:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::getAuthorizationMethod","\t66:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t69:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t73:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t91:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t104:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t107:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t113:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t136:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::parseAccessTokenResponse","\t140:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t146:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t151:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t155:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t156:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::getExtraOAuthHeaders","\t158:     public function testGetExtraOAuthHeaders()","\t160:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t171:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t173:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t176:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/BoxTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Box;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Box::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://www.box.com/api/oauth2/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Box::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://www.box.com/api/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Box::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/BufferTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Buffer;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Buffer::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://bufferapp.com/oauth2/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Buffer::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api.bufferapp.com/1/oauth2/token.json', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Buffer::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Buffer::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Buffer::parseAccessTokenResponse","\t135:      * @covers OAuth\\OAuth2\\Service\\Buffer::requestAccessToken","\t139:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t148:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DailymotionTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Dailymotion;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://api.dailymotion.com/oauth/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api.dailymotion.com/oauth/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t109:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t113:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t209:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t210:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::getExtraOAuthHeaders","\t212:     public function testGetExtraOAuthHeaders()","\t214:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t223:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t225:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t228:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DeezerTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Deezer;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Deezer::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://connect.deezer.com/oauth/auth.php',","\t73:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Deezer::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://connect.deezer.com/oauth/access_token.php',","\t91:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Deezer::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Deezer::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Deezer::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedExceptio"],"id":11}],[{"start":{"row":4258,"column":40},"end":{"row":5083,"column":2},"action":"insert","lines":["n('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Deezer::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DeliciousTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Delicious;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Delicious::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t73:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Delicious::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://avosapi.delicious.com/api/v1/oauth/token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Delicious::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t105:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t111:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t112:      * @covers OAuth\\OAuth2\\Service\\Delicious::parseAccessTokenResponse","\t116:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t131:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t132:      * @covers OAuth\\OAuth2\\Service\\Delicious::parseAccessTokenResponse","\t136:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t140:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t149:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t150:      * @covers OAuth\\OAuth2\\Service\\Delicious::parseAccessTokenResponse","\t154:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t163:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DeviantArtTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\DeviantArt;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://www.deviantart.com/oauth2/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://www.deviantart.com/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t89:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t92:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t96:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t108:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t112:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t113:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::parseAccessTokenResponse","\t117:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t121:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t126:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t132:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t133:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::parseAccessTokenResponse","\t137:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t141:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t146:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t150:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t151:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::parseAccessTokenResponse","\t155:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t159:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t161:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t164:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DropboxTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Dropbox;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAuthorizationUri","\t60:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t66:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t67:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t71:             'https://www.dropbox.com/1/oauth2/authorize?client_id=foo&redirect_uri=bar&response_type=code&scope=',","\t77:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t78:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAuthorizationUri","\t82:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t88:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t93:             'https://www.dropbox.com/1/oauth2/authorize?client_id=foo&redirect_uri=bar&response_type=code&scope=',","\t99:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t100:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAuthorizationEndpoint","\t105:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t106:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t110:         $this->assertSame('https://www.dropbox.com/1/oauth2/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t114:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t115:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAccessTokenEndpoint","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t121:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->assertSame('https://api.dropbox.com/1/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t129:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t130:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAuthorizationMethod","\t134:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t137:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t141:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t157:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t158:      * @covers OAuth\\OAuth2\\Service\\Dropbox::parseAccessTokenResponse","\t162:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t166:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t171:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t177:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Dropbox::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t197:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t198:      * @covers OAuth\\OAuth2\\Service\\Dropbox::parseAccessTokenResponse","\t202:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t206:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t208:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t211:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t215:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t216:      * @covers OAuth\\OAuth2\\Service\\Dropbox::parseAccessTokenResponse","\t220:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t224:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t226:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t229:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/EveOnlineTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\OAuth2\\Service\\EveOnline;","\t11:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\EveOnline::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://login.eveonline.com/oauth/authorize',","\t71:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t72:      * @covers OAuth\\OAuth2\\Service\\EveOnline::getAccessTokenEndpoint","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t82:         $this->assertSame('https://login.eveonline.com/oauth/token',","\t87:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t88:      * @covers OAuth\\OAuth2\\Service\\EveOnline::getAuthorizationMethod","\t92:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t95:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t99:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t103:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t115:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t116:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t120:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t136:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t140:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t146:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t149:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t155:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t156:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t160:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t166:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t169:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t175:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t176:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t180:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t189:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t193:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t194:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t198:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t204:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t207:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/FacebookTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Facebook;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Facebook::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://www.facebook.com/dialog/oauth', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Facebook::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://graph.facebook.com/oauth/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t89:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t92:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t96:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t108:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t112:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t113:      * @covers OAuth\\OAuth2\\Service\\Facebook::parseAccessTokenResponse","\t117:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t121:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t126:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t132:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t133:      * @covers OAuth\\OAuth2\\Service\\Facebook::parseAccessTokenResponse","\t137:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t141:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t146:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t150:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t151:      * @covers OAuth\\OAuth2\\Service\\Facebook::parseAccessTokenResponse","\t155:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t159:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t161:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t164:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t168:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t169:      * @covers OAuth\\OAuth2\\Service\\Facebook::getDialogUri","\t173:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t176:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t178:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t181:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Exception\\\\Exception');","\t187:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t188:      * @covers OAuth\\OAuth2\\Service\\Facebook::getDialogUri","\t192:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t195:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t197:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t207:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\Uri',$dialogUri);","\t211:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t212:      * @covers OAuth\\OAuth2\\Service\\Facebook::getDialogUri","\t216:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t217:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t224:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/FoursquareTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Foursquare;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Foursquare::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://foursquare.com/oauth2/authenticate', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Foursquare::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://foursquare.com/oauth2/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Foursquare::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t109:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t113:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Foursquare::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Foursquare::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Foursquare::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\Foursquare::request","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t179:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t183:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t199:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t200:      * @covers OAuth\\OAuth2\\Service\\Foursquare::request","\t204:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t207:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t211:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t215:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/GitHubTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\GitHub;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\GitHub::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://github.com/login/oauth/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\GitHub::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://github.com/login/oauth/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\GitHub::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\GitHub::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\GitHub::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\GitHub::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\GitHub::getExtraOAuthHeaders","\t174:     public function testGetExtraOAuthHeaders()","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t185:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t190:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t194:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t195:      * @covers OAuth\\OAuth2\\Service\\GitHub::getExtraApiHeaders","\t199:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t202:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t206:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t210:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/GoogleTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Google;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Google::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://accounts.google.com/o/oauth2/auth?access_type=online',","\t74:             'https://accounts.google.com/o/oauth2/auth?access_type=offline',","\t81:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t82:      * @covers OAuth\\OAuth2\\Service\\Google::getAuthorizationEndpoint","\t87:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t88:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t92:         $this->setExpectedException('OAuth\\OAuth2\\Service\\Exception\\InvalidAccessTypeException');","\t103:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t104:      * @covers OAuth\\OAuth2\\Service\\Google::getAccessTokenEndpoint","\t109:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t110:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t111:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t115:             'https://accounts.google.com/o/oauth2/token',","\t121:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t122:      * @covers OAuth\\OAuth2\\Service\\Google::parseAccessTokenResponse","\t126:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t132:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t135:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t141:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t142:      * @covers OAuth\\OAuth2\\Service\\Google::parseAccessTokenResponse","\t146:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t155:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t161:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t162:      * @covers OAuth\\OAuth2\\Service\\Google::parseAccessTokenResponse","\t166:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t172:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t175:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t179:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t180:      * @covers OAuth\\OAuth2\\Service\\Google::parseAccessTokenResponse","\t184:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t190:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t193:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/HerokuTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Heroku;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Heroku::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://id.heroku.com/oauth/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Heroku::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t84:         $this->assertSame('https://id.heroku.com/oauth/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t88:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t89:      * @covers OAuth\\OAuth2\\Service\\Heroku::getAuthorizationMethod","\t93:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t96:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t100:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t104:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t116:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t117:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t121:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t127:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t130:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t136:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t137:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t150:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t156:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t157:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t161:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t165:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t170:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t176:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t177:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t181:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t185:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t190:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t194:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t195:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t199:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t203:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t205:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t208:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t212:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t213:      * @covers OAuth\\OAuth2\\Service\\Heroku::getExtraOAuthHeaders","\t215:     public function testGetExtraOAuthHeaders()","\t217:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t226:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t228:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t231:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t235:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t236:      * @covers OAuth\\OAuth2\\Service\\Heroku::getExtraApiHeaders","\t240:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t243:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t247:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t251:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/HubicTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Hubic;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Hubic::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.hubic.com/oauth/auth',","\t73:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Hubic::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.hubic.com/oauth/token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Hubic::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t105:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t111:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t112:      * @covers OAuth\\OAuth2\\Service\\Hubic::parseAccessTokenResponse","\t116:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t131:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t132:      * @covers OAuth\\OAuth2\\Service\\Hubic::parseAccessTokenResponse","\t136:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t140:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t149:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t150:      * @covers OAuth\\OAuth2\\Service\\Hubic::parseAccessTokenResponse","\t154:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t163:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/InstagramTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Instagram;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Instagram::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.instagram.com/oauth/authorize/',","\t73:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Instagram::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.instagram.com/oauth/access_token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Instagram::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Instagram::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Instagram::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Instagram::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Instagram::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/JawboneUPTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\JawboneUP;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://jawbone.com/auth/oauth2/auth', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://jawbone.com/auth/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/LinkedinTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Linkedin;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t3"],"id":12}],[{"start":{"row":5083,"column":2},"end":{"row":5916,"column":1},"action":"insert","lines":["1:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Linkedin::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://www.linkedin.com/uas/oauth2/authorization',","\t73:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Linkedin::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://www.linkedin.com/uas/oauth2/accessToken',","\t91:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Linkedin::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t118:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t119:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t123:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t127:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t129:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t132:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t138:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t139:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t143:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t149:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t152:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t158:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t159:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t172:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t178:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t179:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t183:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t189:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t192:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t196:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t197:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t201:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t205:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t207:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t210:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/MailchimpTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Mailchimp;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t12:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t19:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t22:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t26:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t57:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::getAuthorizationEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t68:             'https://login.mailchimp.com/oauth2/authorize',","\t74:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t75:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::getAccessTokenEndpoint","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t86:             'https://login.mailchimp.com/oauth2/token',","\t92:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t93:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::getAuthorizationMethod","\t97:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token');","\t104:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t108:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t123:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::parseAccessTokenResponse","\t127:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t131:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t133:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t136:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t142:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t143:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::parseAccessTokenResponse","\t147:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t151:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t153:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t156:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t162:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t163:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::parseAccessTokenResponse","\t167:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t172:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t174:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t177:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/MicrosoftTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Microsoft;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Microsoft::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://login.live.com/oauth20_authorize.srf',","\t73:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Microsoft::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://login.live.com/oauth20_token.srf',","\t91:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Microsoft::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Microsoft::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Microsoft::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Microsoft::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Microsoft::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/NestTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Nest;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Nest::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://home.nest.com/login/oauth2',","\t73:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Nest::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.home.nest.com/oauth2/access_token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Nest::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t118:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t119:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t123:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t127:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t129:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t132:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t138:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t139:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t143:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t149:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t152:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t158:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t159:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t172:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t178:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t179:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t183:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t189:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t192:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t196:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t197:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t201:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t205:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t207:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t210:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/NetatmoTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Netatmo;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Netatmo::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.netatmo.net/oauth2/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Netatmo::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.netatmo.net/oauth2/token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Netatmo::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t105:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t111:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t112:      * @covers OAuth\\OAuth2\\Service\\Netatmo::parseAccessTokenResponse","\t116:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t131:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t132:      * @covers OAuth\\OAuth2\\Service\\Netatmo::parseAccessTokenResponse","\t136:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t140:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t149:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t150:      * @covers OAuth\\OAuth2\\Service\\Netatmo::parseAccessTokenResponse","\t154:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t163:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/ParrotFlowerPowerTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\ParrotFlowerPower;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://apiflowerpower.parrot.com/oauth2/v1/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t91:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t105:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t111:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t112:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::parseAccessTokenResponse","\t116:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t131:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t132:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::parseAccessTokenResponse","\t136:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t140:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t149:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t150:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::parseAccessTokenResponse","\t154:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t163:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/PaypalTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Paypal;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Paypal::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t73:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Paypal::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t91:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Paypal::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t180:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t184:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t190:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t193:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t197:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t198:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t202:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t206:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t208:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t211:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/PinterestTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Pinterest;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Pinterest::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.pinterest.com/oauth/',","\t73:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Pinterest::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.pinterest.com/v1/oauth/token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Box::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Pinterest::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Pinterest::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Pinterest::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t180:      * @covers OAuth\\OAuth2\\Service\\Pinterest::parseAccessTokenResponse","\t184:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t190:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t193:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/RedditTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Reddit;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Reddit::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t73:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Reddit::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t91:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Reddit::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Reddit::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Reddit::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Reddit::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Reddit::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/RunKeeperTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\RunKeeper;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t70:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/SoundCloudTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\SoundCloud;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t70:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api.soundcloud.com/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::parseAccessTokenResponse","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t94:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t96:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t99:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t105:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t106:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::parseAccessTokenResponse","\t110:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t114:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t116:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t119:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t125:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t126:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::parseAccessTokenResponse","\t130:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t134:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t136:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t139:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t143:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t144:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::parseAccessTokenResponse","\t148:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t154:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t157:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/SpotifyTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Spotify;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Spotify::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t70:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Spotify::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Spotify::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Spotify::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Spotify::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Spotify::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\Spotify::parseAccessTokenResponse","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t180:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t185:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t189:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t190:      * @covers OAuth\\OAuth2\\Service\\Spotify::getExtraOAuthHeaders","\t192:     public function testGetExtraOAuthHeaders()","\t194:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t202:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t209:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t212:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/StravaTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Strava;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Strava::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://www.strava.com/oauth/authorize?approval_prompt=auto',","\t74:             'https://www.strava.com/oauth/authorize?approval_prompt=force',","\t81:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t82:      * @covers OAuth\\OAuth2\\Service\\Strava::getAuthorizationEndpoint","\t87:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t88:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t92:         $this->setExpectedException('OAuth\\OAuth2\\Service\\Exception\\InvalidAccessTypeException');","\t103:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t104:      * @covers OAuth\\OAuth2\\Service\\Strava::getAccessTokenEndpoint","\t109:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t110:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t111:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t115:             'https://www.strava.com/oauth/token',","\t121:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t122:      * @covers OAuth\\OAuth2\\Service\\Strava::parseAccessTokenResponse","\t126:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t132:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t135:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t141:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t142:      * @covers OAuth\\OAuth2\\Service\\Strava::parseAccessTokenResponse","\t146:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t155:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t161:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t162:      * @covers OAuth\\OAuth2\\Service\\Strava::parseAccessTokenResponse","\t166:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t172:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t175:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/UstreamTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Ustream;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Ustream::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://www.ustream.tv/oauth2/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Ustream::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://www.ustream.tv/oauth2/token',","\t"],"id":13},{"start":{"row":5916,"column":1},"end":{"row":6201,"column":0},"action":"insert","lines":["91:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Ustream::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Ustream::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Ustream::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Ustream::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Ustream::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/VimeoTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Vimeo;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Vimeo::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.vimeo.com/oauth/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Vimeo::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.vimeo.com/oauth/access_token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Vimeo::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Vimeo::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Vimeo::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Vimeo::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Vimeo::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/VkontakteTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Vkontakte;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://oauth.vk.com/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://oauth.vk.com/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::parseAccessTokenResponse","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t94:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t96:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t99:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t105:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t106:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::parseAccessTokenResponse","\t110:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t114:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t116:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t119:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t125:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t126:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::parseAccessTokenResponse","\t130:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t134:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t136:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t139:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t143:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t144:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::parseAccessTokenResponse","\t148:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t154:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t157:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/YahooTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Yahoo;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Yahoo::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://api.login.yahoo.com/oauth2/request_auth', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Yahoo::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api.login.yahoo.com/oauth2/get_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Yahoo::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Yahoo::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Yahoo::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Yahoo::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\Yahoo::parseAccessTokenResponse","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t180:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t185:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t189:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t190:      * @covers OAuth\\OAuth2\\Service\\Yahoo::getExtraOAuthHeaders","\t192:     public function testGetExtraOAuthHeaders()","\t194:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t202:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t209:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t212:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/YammerTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Yammer;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Yammer::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://www.yammer.com/dialog/oauth', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Yammer::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://www.yammer.com/oauth2/access_token.json', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Yammer::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Yammer::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Yammer::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Yammer::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\Yammer::parseAccessTokenResponse","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t180:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t185:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","Found 7972 matches in 221 files ",""]}],[{"start":{"row":6201,"column":0},"end":{"row":6202,"column":0},"action":"insert","lines":["",""],"id":14},{"start":{"row":0,"column":44},"end":{"row":0,"column":78},"action":"insert","lines":[" (Found 7972 matches in 221 files)"]}],[{"start":{"row":0,"column":0},"end":{"row":6202,"column":0},"action":"remove","lines":["Searching for \u0001oauth\u0001 in\u0001/vendor/lusitanian\u0001 (Found 7972 matches in 221 files)","","/vendor/lusitanian/oauth/composer.json:","\t2:     \"name\": \"lusitanian/oauth\",","\t3:     \"description\": \"PHP 5.3+ oAuth 1/2 Library\",","\t4:     \"keywords\": [\"oauth\", \"authentication\", \"authorization\", \"security\"],","\t36:             \"OAuth\": \"src\",","\t37:             \"OAuth\\\\Unit\": \"tests\"","","/vendor/lusitanian/oauth/phpunit.xml.dist:","\t28:                 <file>src/OAuth/bootstrap.php</file>","\t29:                 <file>src/OAuth/Common/Exception/Exception.php</file>","\t30:                 <file>src/OAuth/Common/Http/Exception/TokenResponseException.php</file>","\t31:                 <file>src/OAuth/Common/Storage/Exception/StorageException.php</file>","\t32:                 <file>src/OAuth/Common/Storage/Exception/TokenNotFoundException.php</file>","\t33:                 <file>src/OAuth/Common/Token/Exception/ExpiredTokenException.php</file>","\t34:                 <file>src/OAuth/OAuth1/Signature/Exception/UnsupportedHashAlgorithmException.php</file>","\t35:                 <file>src/OAuth/OAuth2/Service/Exception/InvalidScopeException.php</file>","\t36:                 <file>src/OAuth/OAuth2/Service/Exception/MissingRefreshTokenException.php</file>","\t37:                 <file>src/OAuth/OAuth2/Token/StdOAuth2Token.php</file>","","/vendor/lusitanian/oauth/README.md:","\t1: PHPoAuthLib","\t5: PHPoAuthLib provides oAuth support in PHP 5.3+ and is very easy to integrate with any project which requires an oAuth client.","\t7: [![Build Status](https://travis-ci.org/Lusitanian/PHPoAuthLib.png?branch=master)](https://travis-ci.org/Lusitanian/PHPoAuthLib)","\t8: [![Code Coverage](https://scrutinizer-ci.com/g/Lusitanian/PHPoAuthLib/badges/coverage.png?s=a0a15bebfda49e79f9ce289b00c6dfebd18fc98e)](https://scrutinizer-ci.com/g/Lusitanian/PHPoAuthLib/)","\t9: [![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/Lusitanian/PHPoAuthLib/badges/quality-score.png?s=c5976d2fefceb501f0d886c1a5bf087e69b44533)](https://scrutinizer-ci.com/g/Lusitanian/PHPoAuthLib/)","\t10: [![Latest Stable Version](https://poser.pugx.org/lusitanian/oauth/v/stable.png)](https://packagist.org/packages/lusitanian/oauth)","\t11: [![Total Downloads](https://poser.pugx.org/lusitanian/oauth/downloads.png)](https://packagist.org/packages/lusitanian/oauth)","\t15: This library can be found on [Packagist](https://packagist.org/packages/lusitanian/oauth).","\t23:         \"lusitanian/oauth\": \"~0.3\"","\t40:     - You can use any HTTP client you desire, just create a class utilizing it which implements `OAuth\\Common\\Http\\ClientInterface` (two implementations are included)","\t41:     - You can use any storage mechanism for tokens. By default, session, in-memory and Redis.io (requires PHPRedis) storage mechanisms are included. Implement additional mechanisms by implementing `OAuth\\Common\\Token\\TokenStorageInterface`.","\t45: The library supports both oAuth 1.x and oAuth 2.0 compliant services. A list of currently implemented services can be found below.","\t49: - OAuth1","\t61: - OAuth2","\t115: * Laravel 4: Dariusz PrzÄ…da has written [a service provider](https://github.com/artdarek/oauth-4-laravel) for the library.","\t116: * Symfony: Alexander Pinnecke has written [a Symfony Bundle](https://github.com/apinnecke/OAuthBundle) for the library.","\t120: * Extract normalized user data from OAuth Services with the library [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData) by Luciano Mammino","","/vendor/lusitanian/oauth/examples/amazon.php:","\t13: use OAuth\\OAuth2\\Service\\Amazon;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/bitbucket.php:","\t16: use OAuth\\OAuth1\\Service\\BitBucket;","\t17: use OAuth\\Common\\Storage\\Session;","\t18: use OAuth\\Common\\Consumer\\Credentials;","\t25: // We need to use a persistent storage to save the token, because oauth1 requires the token secret received before'","\t40: if (!empty($_GET['oauth_token'])) {","\t45:         $_GET['oauth_token'],","\t46:         $_GET['oauth_verifier'],","\t56:     // extra request needed for oauth1 to request a request token :-)","\t59:     $url = $bbService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/bitly.php:","\t14: use OAuth\\OAuth2\\Service\\Bitly;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/bitrix24.php:","\t14: use OAuth\\OAuth2\\Service\\GitHub;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t35: $yourDomain = new \\OAuth\\Common\\Http\\Uri\\Uri('https://'.$servicesCredentials['bitrix24']['domain']);","\t36: /** @var $bitrix24 \\OAuth\\OAuth2\\Service\\Bitrix24 */","","/vendor/lusitanian/oauth/examples/bootstrap.php:","\t22: $uriFactory = new \\OAuth\\Common\\Http\\Uri\\UriFactory();","","/vendor/lusitanian/oauth/examples/box.php:","\t15: use OAuth\\OAuth2\\Service\\Box;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/buffer.php:","\t14: use OAuth\\OAuth2\\Service\\Buffer;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/dailymotion.php:","\t13: use OAuth\\OAuth2\\Service\\Dailymotion;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/deezer.php:","\t11: use OAuth\\OAuth2\\Service\\Deezer;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/delicious.php:","\t10:  * @link    https://github.com/SciDevs/delicious-api/blob/master/api/oauth.md","\t13: use OAuth\\OAuth2\\Service\\Delicious;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t16: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/deviantart.php:","\t15: use OAuth\\OAuth2\\Service\\Facebook;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/dropbox.php:","\t13: use OAuth\\OAuth2\\Service\\Dropbox;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/etsy.php:","\t13: use OAuth\\OAuth1\\Service\\Etsy;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t36: if (!empty($_GET['oauth_token'])) {","\t41:         $_GET['oauth_token'],","\t42:         $_GET['oauth_verifier'],","","/vendor/lusitanian/oauth/examples/eveonline.php:","\t11: use OAuth\\Common\\Consumer\\Credentials;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\OAuth2\\Service\\EveOnline;","\t39:     $result = json_decode($eveService->request('/oauth/verify'), true);","","/vendor/lusitanian/oauth/examples/facebook.php:","\t15: use OAuth\\OAuth2\\Service\\Facebook;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/fitbit.php:","\t14: use OAuth\\OAuth1\\Service\\FitBit;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t37: if (!empty($_GET['oauth_token'])) {","\t42:         $_GET['oauth_token'],","\t43:         $_GET['oauth_verifier'],","\t53:     // extra request needed for oauth1 to request a request token :-)","\t56:     $url = $fitbitService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/fiveHundredPx.php:","\t14: use OAuth\\OAuth1\\Service\\fiveHundredPx;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t37: if (!empty($_GET['oauth_token'])) {","\t42:         $_GET['oauth_token'],","\t43:         $_GET['oauth_verifier'],","\t53:     // extra request needed for oauth1 to request a request token :-)","\t56:     $url = $fivehundredpxService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/flickr.php:","\t11: use OAuth\\OAuth1\\Service\\Flickr;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","\t36: $oauth_token = isset($_GET['oauth_token']) ? $_GET['oauth_token'] : null;","\t37: $oauth_verifier = isset($_GET['oauth_verifier']) ? $_GET['oauth_verifier'] : null;","\t39: if($oauth_token && $oauth_verifier){","\t51: \t\t\t$oauth_token = $token->getAccessToken();","\t54: \t\t\tif($oauth_token && $secret){","\t55: \t\t\t\t$url = $flickrService->getAuthorizationUri(array('oauth_token' => $oauth_token, 'perms' => 'write'));","\t66: \t\tif($token = $flickrService->requestAccessToken($oauth_token, $oauth_verifier, $secret)){","\t67: \t\t\t$oauth_token = $token->getAccessToken();","","/vendor/lusitanian/oauth/examples/foursquare.php:","\t14: use OAuth\\OAuth2\\Service\\Foursquare;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/github.php:","\t14: use OAuth\\OAuth2\\Service\\GitHub;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/google.php:","\t14: use OAuth\\OAuth2\\Service\\Google;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/harvest.php:","\t14: use OAuth\\Common\\Consumer\\Credentials;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Token\\Exception\\ExpiredTokenException;","\t17: use OAuth\\OAuth2\\Service\\Harvest;","","/vendor/lusitanian/oauth/examples/hubic.php:","\t13: use OAuth\\OAuth2\\Service\\Hubic;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t16: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/init.example.php:","\t203: /** @var $serviceFactory \\OAuth\\ServiceFactory An OAuth service factory. */","\t204: $serviceFactory = new \\OAuth\\ServiceFactory();","","/vendor/lusitanian/oauth/examples/instagram.php:","\t15: use OAuth\\OAuth2\\Service\\Instagram;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/jawbone.php:","\t13: use OAuth\\OAuth2\\Service\\JawboneUP;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/linkedin.php:","\t15: use OAuth\\OAuth2\\Service\\Linkedin;","\t16: use OAuth\\Common\\Storage\\Session;","\t17: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/mailchimp.php:","\t14: use OAuth\\OAuth2\\Service\\Mailchimp;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/microsoft.php:","\t14: use OAuth\\OAuth2\\Service\\Microsoft;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/nest.php:","\t11: use OAuth\\OAuth2\\Service\\Nest;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/netatmo.php:","\t13: use OAuth\\OAuth2\\Service\\Netatmo;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t16: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/parrotFlowerPower.php:","\t13: use OAuth\\OAuth2\\Service\\ParrotFlowerPower;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t16: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/paypal.php:","\t13: use OAuth\\OAuth2\\Service\\Paypal;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/pinterest.php:","\t11: use OAuth\\OAuth2\\Service\\Pinterest;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/pocket.php:","\t11: use OAuth\\OAuth2\\Service\\Pocket;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t14: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/quickbooks.php:","\t12: use OAuth\\OAuth1\\Service\\QuickBooks;","\t13: use OAuth\\Common\\Storage\\Session;","\t14: use OAuth\\Common\\Consumer\\Credentials;","\t41: if (!empty($_GET['oauth_token'])) {","\t46:         $_GET['oauth_token'],","\t47:         $_GET['oauth_verifier'],","\t59:     // extra request needed for oauth1 to request a request token :-)","\t62:     $url = $quickbooksService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/reddit.php:","\t13: use OAuth\\OAuth2\\Service\\Reddit;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/redmine.php:","\t5:  * Developed against https://github.com/suer/redmine_oauth_provider","\t6:  * To create oauth credentials read the plugin documentation from","\t7:  * redmine_oauth_provider.","\t21: use OAuth\\Common\\Storage\\Session;","\t22: use OAuth\\Common\\Consumer\\Credentials;","\t23: use OAuth\\Common\\Http\\Uri\\Uri;","\t35: // Instantiate the Redmine service using the credentials, http client, storage mechanism for the token and adding the base uri of the oauth provider","\t36: $redmineService = $serviceFactory->createService('Redmine', $credentials, $storage, array(), new Uri('https://redmine.example.dev/oauth/'));","\t38: if (!empty($_GET['oauth_token'])) {","\t43:         $_GET['oauth_token'],","\t44:         $_GET['oauth_verifier'],","\t54:     // extra request needed for oauth1 to request a request token :-)","\t57:     $url = $redmineService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/runkeeper.php:","\t12: use OAuth\\OAuth2\\Service\\RunKeeper;","\t13: use OAuth\\Common\\Storage\\Session;","\t14: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/scoopit.php:","\t11: use OAuth\\OAuth1\\Service\\ScoopIt;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t33: if (!empty($_GET['oauth_token'])) {","\t38:         $_GET['oauth_token'],","\t39:         $_GET['oauth_verifier'],","\t49:     // extra request needed for oauth1 to request a request token :-)","\t52:     $url = $scoopItService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/soundcloud.php:","\t14: use OAuth\\OAuth2\\Service\\SoundCloud;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/spotify.php:","\t14: use OAuth\\OAuth2\\Service\\Spotify;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/strava.php:","\t14: use OAuth\\OAuth2\\Service\\Strava;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t18: use OAuth\\Common\\Http\\Client\\CurlClient;","","/vendor/lusitanian/oauth/examples/tumblr.php:","\t14: use OAuth\\OAuth1\\Service\\Tumblr;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t23: // We need to use a persistent storage to save the token, because oauth1 requires the token secret received before'","\t38: if (!empty($_GET['oauth_token'])) {","\t43:         $_GET['oauth_token'],","\t44:         $_GET['oauth_verifier'],","\t54:     // extra request needed for oauth1 to request a request token :-)","\t57:     $url = $tumblrService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/twitter.php:","\t14: use OAuth\\OAuth1\\Service\\Twitter;","\t15: use OAuth\\Common\\Storage\\Session;","\t16: use OAuth\\Common\\Consumer\\Credentials;","\t23: // We need to use a persistent storage to save the token, because oauth1 requires the token secret received before'","\t38: if (!empty($_GET['oauth_token'])) {","\t43:         $_GET['oauth_token'],","\t44:         $_GET['oauth_verifier'],","\t54:     // extra request needed for oauth1 to request a request token :-)","\t57:     $url = $twitterService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/ustream.php:","\t13: use OAuth\\OAuth2\\Service\\Ustream;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/vimeo.php:","\t13: use OAuth\\OAuth2\\Service\\Vimeo;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","","/vendor/lusitanian/oauth/examples/yahoo.php:","\t11: use OAuth\\OAuth1\\Service\\Yahoo;","\t12: use OAuth\\Common\\Storage\\Session;","\t13: use OAuth\\Common\\Consumer\\Credentials;","\t33: if (!empty($_GET['oauth_token'])) {","\t38:         $_GET['oauth_token'],","\t39:         $_GET['oauth_verifier'],","\t49:     // extra request needed for oauth1 to request a request token :-)","\t52:     $url = $yahooService->getAuthorizationUri(array('oauth_token' => $token->getRequestToken()));","","/vendor/lusitanian/oauth/examples/yammer.php:","\t13: use OAuth\\OAuth2\\Service\\Yammer;","\t14: use OAuth\\Common\\Storage\\Session;","\t15: use OAuth\\Common\\Consumer\\Credentials;","\t17: include_once(__DIR__.'/OAuth/bootstrap.php');","\t24: //$serviceFactory = new \\OAuth\\ServiceFactory(); ","\t27: //$uriFactory = new \\OAuth\\Common\\Http\\Uri\\UriFactory();","","/vendor/lusitanian/oauth/src/OAuth/bootstrap.php:","\t7: namespace OAuth;","","/vendor/lusitanian/oauth/src/OAuth/ServiceFactory.php:","\t4:  * OAuth service factory.","\t8:  * @category   OAuth","\t15: namespace OAuth;","\t17: use OAuth\\Common\\Service\\ServiceInterface;","\t18: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t19: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t20: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t21: use OAuth\\Common\\Http\\Client\\StreamClient;","\t22: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t23: use OAuth\\Common\\Exception\\Exception;","\t24: use OAuth\\OAuth1\\Signature\\Signature;","\t37:         'OAuth1' => array(),","\t38:         'OAuth2' => array()","\t45:         'OAuth2' => 'buildV2Service',","\t46:         'OAuth1' => 'buildV1Service',","\t79:         foreach (array('OAuth2', 'OAuth1') as $version) {","\t80:             if ($reflClass->implementsInterface('OAuth\\\\' . $version . '\\\\Service\\\\ServiceInterface')) {","\t91:      * Builds and returns oauth services","\t93:      * It will first try to build an OAuth2 service and if none found it will try to build an OAuth1 service","\t98:      * @param array|null            $scopes      If creating an oauth2 service, array of scopes","\t139:      * @param string $type        The type of the service to get (either OAuth1 or OAuth2)","\t151:         return '\\\\OAuth\\\\' . $type . '\\\\Service\\\\' . $serviceName;","\t234:                 'Scopes passed to ServiceFactory::createService but an OAuth1 service was requested.'","","/vendor/lusitanian/oauth/src/OAuth/Common/AutoLoader.php:","\t3: namespace OAuth\\Common;","","/vendor/lusitanian/oauth/src/OAuth/Common/Consumer/Credentials.php:","\t3: namespace OAuth\\Common\\Consumer;","\t6:  * Value object for the credentials of an OAuth service.","","/vendor/lusitanian/oauth/src/OAuth/Common/Consumer/CredentialsInterface.php:","\t3: namespace OAuth\\Common\\Consumer;","","/vendor/lusitanian/oauth/src/OAuth/Common/Exception/Exception.php:","\t3: namespace OAuth\\Common\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Client/AbstractClient.php:","\t3: namespace OAuth\\Common\\Http\\Client;","\t30:     public function __construct($userAgent = 'PHPoAuthLib')","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Client/ClientInterface.php:","\t3: namespace OAuth\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Client/CurlClient.php:","\t3: namespace OAuth\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Client/StreamClient.php:","\t3: namespace OAuth\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Exception/TokenResponseException.php:","\t3: namespace OAuth\\Common\\Http\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Uri/Uri.php:","\t3: namespace OAuth\\Common\\Http\\Uri;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Uri/UriFactory.php:","\t3: namespace OAuth\\Common\\Http\\Uri;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Uri/UriFactoryInterface.php:","\t3: namespace OAuth\\Common\\Http\\Uri;","","/vendor/lusitanian/oauth/src/OAuth/Common/Http/Uri/UriInterface.php:","\t3: namespace OAuth\\Common\\Http\\Uri;","","/vendor/lusitanian/oauth/src/OAuth/Common/Service/AbstractService.php:","\t3: namespace OAuth\\Common\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t9: use OAuth\\Common\\Exception\\Exception;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t13:  * Abstract OAuth service, version-agnostic","","/vendor/lusitanian/oauth/src/OAuth/Common/Service/ServiceInterface.php:","\t3: namespace OAuth\\Common\\Service;","\t5: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t8:  * Defines methods common among all OAuth services.","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Memory.php:","\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","\t7: use OAuth\\Common\\Storage\\Exception\\AuthorizationStateNotFoundException;","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Redis.php:","\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","\t7: use OAuth\\Common\\Storage\\Exception\\AuthorizationStateNotFoundException;","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Session.php:","\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","\t7: use OAuth\\Common\\Storage\\Exception\\AuthorizationStateNotFoundException;","\t36:         $sessionVariableName = 'lusitanian-oauth-token',","\t37:         $stateVariableName = 'lusitanian-oauth-state'","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/SymfonySession.php:","\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","\t7: use OAuth\\Common\\Storage\\Exception\\AuthorizationStateNotFoundException;","\t25:         $sessionVariableName = 'lusitanian_oauth_token',","\t26:         $stateVariableName = 'lusitanian_oauth_state'","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/TokenStorageInterface.php:","\t3: namespace OAuth\\Common\\Storage;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\Common\\Storage\\Exception\\TokenNotFoundException;","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Exception/AuthorizationStateNotFoundException.php:","\t3: namespace OAuth\\Common\\Storage\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Exception/StorageException.php:","\t3: namespace OAuth\\Common\\Storage\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Exception/TokenNotFoundException.php:","\t3: namespace OAuth\\Common\\Storage\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/Common/Token/AbstractToken.php:","\t3: namespace OAuth\\Common\\Token;","\t6:  * Base token implementation for any OAuth version.","","/vendor/lusitanian/oauth/src/OAuth/Common/Token/TokenInterface.php:","\t3: namespace OAuth\\Common\\Token;","\t6:  * Base token interface for any OAuth version.","\t16:      * Denotes a token which never expires, should only happen in OAuth1.","","/vendor/lusitanian/oauth/src/OAuth/Common/Token/Exception/ExpiredTokenException.php:","\t3: namespace OAuth\\Common\\Token\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/AbstractService.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t11: use OAuth\\OAuth1\\Token\\TokenInterface;","\t12: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t13: use OAuth\\Common\\Service\\AbstractService as BaseAbstractService;","\t17:     /** @const OAUTH_VERSION */","\t18:     const OAUTH_VERSION = 1;","\t50:         $headers = array_merge($authorizationHeader, $this->getExtraOAuthHeaders());","\t86:             'oauth_verifier' => $verifier,","\t98:         $headers = array_merge($authorizationHeader, $this->getExtraOAuthHeaders());","\t109:      * Refreshes an OAuth1 access token","\t133:         /** @var $token StdOAuth1Token */","\t145:      * Return any additional headers always needed for this service implementation's OAuth calls.","\t149:     protected function getExtraOAuthHeaders()","\t175:         $parameters['oauth_signature'] = $this->signature->getSignature(","\t181:         $authorizationHeader = 'OAuth ';","\t210:         if (isset($authParameters['oauth_callback'])) {","\t211:             unset($authParameters['oauth_callback']);","\t214:         $authParameters = array_merge($authParameters, array('oauth_token' => $token->getAccessToken()));","\t217:         $authParameters['oauth_signature'] = $this->signature->getSignature($uri, $signatureParams, $method);","\t219:         if (is_array($bodyParams) && isset($bodyParams['oauth_session_handle'])) {","\t220:             $authParameters['oauth_session_handle'] = $bodyParams['oauth_session_handle'];","\t221:             unset($bodyParams['oauth_session_handle']);","\t224:         $authorizationHeader = 'OAuth ';","\t244:             'oauth_callback'         => $this->credentials->getCallbackUrl(),","\t245:             'oauth_consumer_key'     => $this->credentials->getConsumerId(),","\t246:             'oauth_nonce'            => $this->generateNonce(),","\t247:             'oauth_signature_method' => $this->getSignatureMethod(),","\t248:             'oauth_timestamp'        => $dateTime->format('U'),","\t249:             'oauth_version'          => $this->getVersion(),","\t295:      * This is only needed to verify the `oauth_callback_confirmed` parameter. The actual","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/BitBucket.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t35:         return new Uri('https://bitbucket.org/!api/1.0/oauth/request_token');","\t43:         return new Uri('https://bitbucket.org/!api/1.0/oauth/authenticate');","\t51:         return new Uri('https://bitbucket.org/!api/1.0/oauth/access_token');","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Etsy.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t38:         $uri = new Uri($this->baseApiUri . 'oauth/request_token');","\t61:         return new Uri($this->baseApiUri . 'oauth/access_token');","\t73:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t93:         $token = new StdOAuth1Token();","\t95:         $token->setRequestToken($data['oauth_token']);","\t96:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t97:         $token->setAccessToken($data['oauth_token']);","\t98:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t100:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t101:         unset($data['oauth_token'], $data['oauth_token_secret']);","\t109:      * @see https://www.etsy.com/developers/documentation/getting_started/oauth#section_permission_scopes","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/FitBit.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t35:         return new Uri('https://api.fitbit.com/oauth/request_token');","\t43:         return new Uri('https://www.fitbit.com/oauth/authorize');","\t51:         return new Uri('https://api.fitbit.com/oauth/access_token');","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/FiveHundredPx.php:","\t10: namespace OAuth\\OAuth1\\Service;","\t12: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t13: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t14: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t15: use OAuth\\Common\\Http\\Uri\\Uri;","\t16: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t17: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t18: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t19: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t55:         return new Uri('https://api.500px.com/v1/oauth/request_token');","\t63:         return new Uri('https://api.500px.com/v1/oauth/authorize');","\t71:         return new Uri('https://api.500px.com/v1/oauth/access_token');","\t83:         } elseif (!isset($data['oauth_callback_confirmed'])","\t84:             || $data['oauth_callback_confirmed'] !== 'true'","\t107:         $token = new StdOAuth1Token();","\t109:         $token->setRequestToken($data['oauth_token']);","\t110:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t111:         $token->setAccessToken($data['oauth_token']);","\t112:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t114:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t115:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Flickr.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t33:         return new Uri('https://www.flickr.com/services/oauth/request_token');","\t38:         return new Uri('https://www.flickr.com/services/oauth/authorize');","\t43:         return new Uri('https://www.flickr.com/services/oauth/access_token');","\t51:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] != 'true') {","\t66:         $token = new StdOAuth1Token();","\t67:         $token->setRequestToken($data['oauth_token']);","\t68:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t69:         $token->setAccessToken($data['oauth_token']);","\t70:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t71:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t72:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/QuickBooks.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t12: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t44:         return new Uri('https://oauth.intuit.com/oauth/v1/get_request_token');","\t60:         return new Uri('https://oauth.intuit.com/oauth/v1/get_access_token');","\t72:         } elseif (!isset($data['oauth_callback_confirmed'])","\t73:             || $data['oauth_callback_confirmed'] !== 'true') {","\t94:         $token = new StdOAuth1Token();","\t96:         $token->setRequestToken($data['oauth_token']);","\t97:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t98:         $token->setAccessToken($data['oauth_token']);","\t99:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t101:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t102:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Redmine.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/ScoopIt.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t35:         return new Uri('https://www.scoop.it/oauth/request');","\t43:         return new Uri('https://www.scoop.it/oauth/authorize');","\t51:         return new Uri('https://www.scoop.it/oauth/access');","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/ServiceInterface.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t7: use OAuth\\Common\\Token\\TokenInterface;","\t8: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t11: use OAuth\\Common\\Service\\ServiceInterface as BaseServiceInterface;","\t12: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t15:  * Defines the common methods across OAuth 1 services.","\t20:      * Retrieves and stores/returns the OAuth1 request token obtained from the service.","\t29:      * Retrieves and stores/returns the OAuth1 access token after a successful authorization.","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Tumblr.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t35:         return new Uri('https://www.tumblr.com/oauth/request_token');","\t43:         return new Uri('https://www.tumblr.com/oauth/authorize');","\t51:         return new Uri('https://www.tumblr.com/oauth/access_token');","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t83:         $token = new StdOAuth1Token();","\t85:         $token->setRequestToken($data['oauth_token']);","\t86:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t87:         $token->setAccessToken($data['oauth_token']);","\t88:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t90:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t91:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Twitter.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t13: use OAuth\\Common\\Exception\\Exception;","\t17:     const ENDPOINT_AUTHENTICATE = \"https://api.twitter.com/oauth/authenticate\";","\t18:     const ENDPOINT_AUTHORIZE    = \"https://api.twitter.com/oauth/authorize\";","\t41:         return new Uri('https://api.twitter.com/oauth/request_token');","\t76:         return new Uri('https://api.twitter.com/oauth/access_token');","\t88:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t106:         } elseif (!isset($data[\"oauth_token\"]) || !isset($data[\"oauth_token_secret\"])) {","\t107:             throw new TokenResponseException('Invalid response. OAuth Token data not set: ' . $responseBody);","\t110:         $token = new StdOAuth1Token();","\t112:         $token->setRequestToken($data['oauth_token']);","\t113:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t114:         $token->setAccessToken($data['oauth_token']);","\t115:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t117:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t118:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Xing.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t63:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t84:         $token = new StdOAuth1Token();","\t86:         $token->setRequestToken($data['oauth_token']);","\t87:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t88:         $token->setAccessToken($data['oauth_token']);","\t89:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t91:         $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t92:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Service/Yahoo.php:","\t3: namespace OAuth\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t6: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t13: use OAuth\\OAuth1\\Token\\TokenInterface;","\t36:         return new Uri('https://api.login.yahoo.com/oauth/v2/get_request_token');","\t44:         return new Uri('https://api.login.yahoo.com/oauth/v2/request_auth');","\t52:         return new Uri('https://api.login.yahoo.com/oauth/v2/get_token');","\t61:         $bodyParams = array('oauth_session_handle' => $extraParams['oauth_session_handle']);","\t74:         $headers = array_merge($authorizationHeader, $this->getExtraOAuthHeaders(), array());","\t93:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t113:         $token = new StdOAuth1Token();","\t115:         $token->setRequestToken($data['oauth_token']);","\t116:         $token->setRequestTokenSecret($data['oauth_token_secret']);","\t117:         $token->setAccessToken($data['oauth_token']);","\t118:         $token->setAccessTokenSecret($data['oauth_token_secret']);","\t120:         if (isset($data['oauth_expires_in'])) {","\t121:             $token->setLifetime($data['oauth_expires_in']);","\t123:             $token->setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);","\t126:         unset($data['oauth_token'], $data['oauth_token_secret']);","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Signature/Signature.php:","\t3: namespace OAuth\\OAuth1\\Signature;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t7: use OAuth\\OAuth1\\Signature\\Exception\\UnsupportedHashAlgorithmException;","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Signature/SignatureInterface.php:","\t3: namespace OAuth\\OAuth1\\Signature;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Signature/Exception/UnsupportedHashAlgorithmException.php:","\t3: namespace OAuth\\OAuth1\\Signature\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Token/StdOAuth1Token.php:","\t3: namespace OAuth\\OAuth1\\Token;","\t5: use OAuth\\Common\\Token\\AbstractToken;","\t8:  * Standard OAuth1 token implementation.","\t9:  * Implements OAuth\\OAuth1\\Token\\TokenInterface in case of any OAuth1 specific features.","\t11: class StdOAuth1Token extends AbstractToken implements TokenInterface","","/vendor/lusitanian/oauth/src/OAuth/OAuth1/Token/TokenInterface.php:","\t3: namespace OAuth\\OAuth1\\Token;","\t5: use OAuth\\Common\\Token\\TokenInterface as BaseTokenInterface;","\t8:  * OAuth1 specific token interface","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/AbstractService.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Exception\\Exception;","\t7: use OAuth\\Common\\Service\\AbstractService as BaseAbstractService;","\t8: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t9: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t12: use OAuth\\OAuth2\\Service\\Exception\\InvalidAuthorizationStateException;","\t13: use OAuth\\OAuth2\\Service\\Exception\\InvalidScopeException;","\t14: use OAuth\\OAuth2\\Service\\Exception\\MissingRefreshTokenException;","\t15: use OAuth\\Common\\Token\\TokenInterface;","\t16: use OAuth\\Common\\Token\\Exception\\ExpiredTokenException;","\t20:     /** @const OAUTH_VERSION */","\t21:     const OAUTH_VERSION = 2;","\t124:             $this->getExtraOAuthHeaders()","\t167:         if (static::AUTHORIZATION_METHOD_HEADER_OAUTH === $this->getAuthorizationMethod()) {","\t168:             $extraHeaders = array_merge(array('Authorization' => 'OAuth ' . $token->getAccessToken()), $extraHeaders);","\t172:             $uri->addToQuery('oauth2_access_token', $token->getAccessToken());","\t197:      * Refreshes an OAuth2 access token.","\t224:             $this->getExtraOAuthHeaders()","\t300:      * Return any additional headers always needed for this service implementation's OAuth calls.","\t304:     protected function getExtraOAuthHeaders()","\t340:         return static::AUTHORIZATION_METHOD_HEADER_OAUTH;","\t355:      * For services that do not fully respect the Oauth's RFC,","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Amazon.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t81:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Bitly.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t34:         return new Uri('https://bitly.com/oauth/authorize');","\t42:         return new Uri('https://api-ssl.bitly.com/oauth/access_token');","\t66:         $token = new StdOAuth2Token();","\t69:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","\t97:             $this->getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Bitrix24.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t31:         return new Uri(sprintf('%s/oauth/authorize/', $this->baseApiUri));","\t39:         return new Uri(sprintf('%s/oauth/token/', $this->baseApiUri));","\t54:             $this->getExtraOAuthHeaders(),","\t102:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Box.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t17:  * @link https://developers.box.com/oauth/","\t40:         return new Uri('https://www.box.com/api/oauth2/authorize');","\t48:         return new Uri('https://www.box.com/api/oauth2/token');","\t72:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Buffer.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t38:         return new Uri('https://bufferapp.com/oauth2/authorize');","\t46:         return new Uri('https://api.bufferapp.com/1/oauth2/token.json');","\t124:             $this->getExtraOAuthHeaders()","\t142:         $token = new StdOAuth2Token();","\t145:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Dailymotion.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t68:         return new Uri('https://api.dailymotion.com/oauth/authorize');","\t76:         return new Uri('https://api.dailymotion.com/oauth/token');","\t84:         return static::AUTHORIZATION_METHOD_HEADER_OAUTH;","\t105:         $token = new StdOAuth2Token();","\t125:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Deezer.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t67:         return new Uri('https://connect.deezer.com/oauth/auth.php');","\t75:         return new Uri('https://connect.deezer.com/oauth/access_token.php');","\t104:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Delicious.php:","\t7:  * @link    https://github.com/SciDevs/delicious-api/blob/master/api/oauth.md","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t25:  * @link    https://github.com/SciDevs/delicious-api/blob/master/api/oauth.md","\t64:         return new Uri('https://avosapi.delicious.com/api/v1/oauth/token');","\t90:         $token = new StdOAuth2Token();","\t110:     // Special, delicious didn't respect the oauth2 RFC and need a grant_type='code'","\t131:             $this->getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/DeviantArt.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Exception\\Exception;","\t6: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t46:             $this->baseApiUri = new Uri('https://www.deviantart.com/api/v1/oauth2/');","\t55:         return new Uri('https://www.deviantart.com/oauth2/authorize');","\t63:         return new Uri('https://www.deviantart.com/oauth2/token');","\t80:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Dropbox.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t65:         return new Uri('https://www.dropbox.com/1/oauth2/authorize');","\t73:         return new Uri('https://api.dropbox.com/1/oauth2/token');","\t97:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/EveOnline.php:","\t8: namespace OAuth\\OAuth2\\Service;","\t10: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t11: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t12: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t13: use OAuth\\Common\\Http\\Uri\\Uri;","\t14: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t15: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t16: use OAuth\\Common\\Token\\TokenInterface;","\t17: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t44:         return new Uri($this->baseApiUri . '/oauth/authorize');","\t53:         return new Uri($this->baseApiUri . '/oauth/token');","\t76:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Facebook.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Exception\\Exception;","\t6: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t145:         return new Uri('https://www.facebook.com'.$this->getApiVersionString().'/dialog/oauth');","\t153:         return new Uri('https://graph.facebook.com'.$this->getApiVersionString().'/oauth/access_token');","\t170:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Foursquare.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t36:         return new Uri('https://foursquare.com/oauth2/authenticate');","\t44:         return new Uri('https://foursquare.com/oauth2/access_token');","\t60:         $token = new StdOAuth2Token();","\t63:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/GitHub.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t16:      * Defined scopes, see http://developer.github.com/v3/oauth/ for definitions.","\t146:         return new Uri('https://github.com/login/oauth/authorize');","\t154:         return new Uri('https://github.com/login/oauth/access_token');","\t178:         $token = new StdOAuth2Token();","\t181:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","\t194:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Google.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t7: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t8: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t9: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t10: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t11: use OAuth\\OAuth2\\Service\\Exception\\InvalidAccessTypeException;","\t12: use OAuth\\Common\\Http\\Uri\\Uri;","\t18:      * https://developers.google.com/oauthplayground/","\t141:             $this->baseApiUri = new Uri('https://www.googleapis.com/oauth2/v1/');","\t158:         return new Uri('https://accounts.google.com/o/oauth2/auth?access_type=' . $this->accessType);","\t166:         return new Uri('https://accounts.google.com/o/oauth2/token');","\t182:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Harvest.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Token\\TokenInterface;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t60:         return new Uri('https://api.harvestapp.com/oauth2/authorize');","\t68:         return new Uri('https://api.harvestapp.com/oauth2/token');","\t92:         $token = new StdOAuth2Token();","\t105:      * Refreshes an OAuth2 access token.","\t132:             $this->getExtraOAuthHeaders()","\t143:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Heroku.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t17:  * @link https://devcenter.heroku.com/articles/oauth","\t23:      * @link https://devcenter.heroku.com/articles/oauth#scopes","\t54:         return new Uri('https://id.heroku.com/oauth/authorize');","\t62:         return new Uri('https://id.heroku.com/oauth/token');","\t91:         $token = new StdOAuth2Token();","\t111:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Hubic.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t68:         return new Uri('https://api.hubic.com/oauth/auth');","\t77:         return new Uri('https://api.hubic.com/oauth/token');","\t103:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Instagram.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t45:         return new Uri('https://api.instagram.com/oauth/authorize/');","\t53:         return new Uri('https://api.instagram.com/oauth/access_token');","\t77:         $token = new StdOAuth2Token();","\t80:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/JawboneUP.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t96:         return new Uri('https://jawbone.com/auth/oauth2/auth');","\t104:         return new Uri('https://jawbone.com/auth/oauth2/token');","\t128:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Linkedin.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t55:         return new Uri('https://www.linkedin.com/uas/oauth2/authorization');","\t63:         return new Uri('https://www.linkedin.com/uas/oauth2/accessToken');","\t87:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Mailchimp.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t42:         return new Uri('https://login.mailchimp.com/oauth2/authorize');","\t50:         return new Uri('https://login.mailchimp.com/oauth2/token');","\t69:         $token = new StdOAuth2Token($data['access_token']);","\t75:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","\t95:      * @param StdOAuth2Token $token","\t97:     protected function setBaseApiUri(StdOAuth2Token $token)","\t100:         $endpoint = 'https://login.mailchimp.com/oauth2/metadata?oauth_token='. $token->getAccessToken();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Microsoft.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t45:      * https://github.com/Lusitanian/PHPoAuthLib/issues/214","\t72:         return new Uri('https://login.live.com/oauth20_authorize.srf');","\t80:         return new Uri('https://login.live.com/oauth20_token.srf');","\t104:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Nest.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t56:         return new Uri('https://home.nest.com/login/oauth2');","\t64:         return new Uri('https://api.home.nest.com/oauth2/access_token');","\t90:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Netatmo.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t66:         return new Uri($this->baseApiUri.'oauth2/authorize');","\t75:         return new Uri($this->baseApiUri.'oauth2/token');","\t101:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/ParrotFlowerPower.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t19: use OAuth\\OAuth2\\Service\\Exception\\MissingRefreshTokenException;","\t20: use OAuth\\Common\\Token\\TokenInterface;","\t58:         return new Uri($this->baseApiUri.'oauth2/v1/authorize');","\t93:         $token = new StdOAuth2Token();","\t135:             $this->getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Paypal.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t87:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Pinterest.php:","\t10: namespace OAuth\\OAuth2\\Service;","\t12: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t13: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t14: use OAuth\\Common\\Http\\Uri\\Uri;","\t15: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t16: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t17: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t18: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t64:         return new Uri('https://api.pinterest.com/oauth/');","\t72:         return new Uri('https://api.pinterest.com/v1/oauth/token');","\t98:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Pocket.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t30:         return new Uri('https://getpocket.com/v3/oauth/request');","\t40:         return new Uri('https://getpocket.com/v3/oauth/authorize');","\t98:             $this->getExtraOAuthHeaders()","\t116:         $token = new StdOAuth2Token();","\t119:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Reddit.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t18:      * @link http://www.reddit.com/dev/api/oauth","\t47:             $this->baseApiUri = new Uri('https://oauth.reddit.com');","\t88:         $token = new StdOAuth2Token();","\t108:     protected function getExtraOAuthHeaders()","\t110:         // Reddit uses a Basic OAuth header","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/RunKeeper.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t96:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Salesforce.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\AbstractService;","\t6: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t7: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t8: use OAuth\\Common\\Http\\Uri\\Uri;","\t9: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t10: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t11: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t12: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t29:         return new Uri('https://login.salesforce.com/services/oauth2/authorize');","\t37:         return new Uri('https://na1.salesforce.com/services/oauth2/token');","\t49:         } elseif (!isset($data['oauth_callback_confirmed']) || $data['oauth_callback_confirmed'] !== 'true') {","\t69:         $token = new StdOAuth2Token();","\t72:         $token->setEndOfLife(StdOAuth2Token::EOL_NEVER_EXPIRES);","\t88:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/ServiceInterface.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t6: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t7: use OAuth\\Common\\Token\\TokenInterface;","\t8: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t9: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t10: use OAuth\\Common\\Service\\ServiceInterface as BaseServiceInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t14:  * Defines the common methods across OAuth 2 services.","\t21:     const AUTHORIZATION_METHOD_HEADER_OAUTH    = 0;","\t29:      * Retrieves and stores/returns the OAuth2 access token after a successful authorization.","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/SoundCloud.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t42:         return new Uri('https://api.soundcloud.com/oauth2/token');","\t58:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Spotify.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t84:         $token = new StdOAuth2Token();","\t107:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Strava.php:","\t8:  * @link    http://strava.github.io/api/v3/oauth/","\t11: namespace OAuth\\OAuth2\\Service;","\t13: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t14: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t15: use OAuth\\Common\\Http\\Uri\\Uri;","\t16: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t17: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t18: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t19: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t20: use OAuth\\OAuth2\\Service\\Exception\\InvalidAccessTypeException;","\t28:  * @link    http://strava.github.io/api/v3/oauth/","\t74:         return new Uri('https://www.strava.com/oauth/authorize?approval_prompt=' . $this->approvalPrompt);","\t82:         return new Uri('https://www.strava.com/oauth/token');","\t112:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Ustream.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t42:         return new Uri('https://www.ustream.tv/oauth2/authorize');","\t50:         return new Uri('https://www.ustream.tv/oauth2/token');","\t74:         $token = new StdOAuth2Token();","\t94:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Vimeo.php:","\t11: namespace OAuth\\OAuth2\\Service;","\t13: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t14: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t15: use OAuth\\Common\\Http\\Uri\\Uri;","\t16: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t17: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t18: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t19: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t84:         return new Uri('https://api.vimeo.com/oauth/authorize');","\t92:         return new Uri('https://api.vimeo.com/oauth/access_token');","\t122:         $token = new StdOAuth2Token();","\t144:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Vkontakte.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t61:         return new Uri('https://oauth.vk.com/authorize');","\t69:         return new Uri('https://oauth.vk.com/access_token');","\t85:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Yahoo.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t17:         return new Uri('https://api.login.yahoo.com/oauth2/request_auth');","\t25:         return new Uri('https://api.login.yahoo.com/oauth2/get_token');","\t49:         $token = new StdOAuth2Token();","\t69:     protected function getExtraOAuthHeaders()","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Yammer.php:","\t3: namespace OAuth\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t8: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t9: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t10: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t11: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t34:         return new Uri('https://www.yammer.com/dialog/oauth');","\t42:         return new Uri('https://www.yammer.com/oauth2/access_token.json');","\t66:         $token = new StdOAuth2Token();","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Exception/InvalidAccessTypeException.php:","\t3: namespace OAuth\\OAuth2\\Service\\Exception;","\t5: use OAuth\\Common\\Exception\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Exception/InvalidAuthorizationStateException.php:","\t3: namespace OAuth\\OAuth2\\Service\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Exception/InvalidScopeException.php:","\t8: namespace OAuth\\OAuth2\\Service\\Exception;","\t10: use OAuth\\Common\\Exception\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Service/Exception/MissingRefreshTokenException.php:","\t8: namespace OAuth\\OAuth2\\Service\\Exception;","\t10: use OAuth\\Common\\Exception\\Exception;","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Token/StdOAuth2Token.php:","\t3: namespace OAuth\\OAuth2\\Token;","\t5: use OAuth\\Common\\Token\\AbstractToken;","\t8:  * Standard OAuth2 token implementation.","\t9:  * Implements OAuth\\OAuth2\\Token\\TokenInterface for any functionality that might not be provided by AbstractToken.","\t11: class StdOAuth2Token extends AbstractToken implements TokenInterface","","/vendor/lusitanian/oauth/src/OAuth/OAuth2/Token/TokenInterface.php:","\t3: namespace OAuth\\OAuth2\\Token;","\t5: use OAuth\\Common\\Token\\TokenInterface as BaseTokenInterface;","","/vendor/lusitanian/oauth/tests/bootstrap.php:","\t7:  * @category   OAuthTest","\t13: namespace OAuthTest;","\t21:  * Simple SPL autoloader for the OAuthTest mocks","","/vendor/lusitanian/oauth/tests/Mocks/Common/Service/Mock.php:","\t3: namespace OAuthTest\\Mocks\\Common\\Service;","\t5: use OAuth\\Common\\Service\\AbstractService;","\t6: use OAuth\\Common\\Http\\Uri\\UriInterface;","","/vendor/lusitanian/oauth/tests/Mocks/OAuth1/Service/Fake.php:","\t3: namespace OAuthTest\\Mocks\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\AbstractService;","\t6: use OAuth\\Common\\Consumer\\CredentialsInterface;","\t7: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t8: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t9: use OAuth\\OAuth1\\Signature\\SignatureInterface;","\t10: use OAuth\\Common\\Http\\Uri\\UriInterface;","","/vendor/lusitanian/oauth/tests/Mocks/OAuth1/Service/Mock.php:","\t3: namespace OAuthTest\\Mocks\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\AbstractService;","\t6: use OAuth\\Common\\Http\\Uri\\Uri;","\t7: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t28:         return new StdOAuth1Token();","\t33:         return new StdOAuth1Token();","","/vendor/lusitanian/oauth/tests/Mocks/OAuth2/Service/Fake.php:","\t3: namespace OAuthTest\\Mocks\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\AbstractService;","","/vendor/lusitanian/oauth/tests/Mocks/OAuth2/Service/Mock.php:","\t3: namespace OAuthTest\\Mocks\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\AbstractService;","\t6: use OAuth\\Common\\Http\\Uri\\Uri;","\t7: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t28:         return new StdOAuth2Token();","","/vendor/lusitanian/oauth/tests/Unit/ServiceFactoryTest.php:","\t3:  * @category   OAuth","\t11: namespace OAuth\\Unit;","\t13: use OAuth\\ServiceFactory;","\t18:      * @covers OAuth\\ServiceFactory::setHttpClient","\t25:             '\\\\OAuth\\\\ServiceFactory',","\t26:             $factory->setHttpClient($this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'))","\t31:      * @covers OAuth\\ServiceFactory::registerService","\t35:         $this->setExpectedException('\\\\OAuth\\Common\\Exception\\Exception');","\t42:      * @covers OAuth\\ServiceFactory::registerService","\t46:         $this->setExpectedException('\\\\OAuth\\Common\\Exception\\Exception');","\t49:         $factory->registerService('foo', 'OAuth\\\\ServiceFactory');","\t53:      * @covers OAuth\\ServiceFactory::registerService","\t55:     public function testRegisterServiceSuccessOAuth1()","\t60:             '\\\\OAuth\\\\ServiceFactory',","\t61:             $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake')","\t66:      * @covers OAuth\\ServiceFactory::registerService","\t68:     public function testRegisterServiceSuccessOAuth2()","\t73:             '\\\\OAuth\\\\ServiceFactory',","\t74:             $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake')","\t79:      * @covers OAuth\\ServiceFactory::createService","\t80:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t81:      * @covers OAuth\\ServiceFactory::buildV1Service","\t83:     public function testCreateServiceOAuth1NonRegistered()","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t90:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t93:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\Twitter', $service);","\t97:      * @covers OAuth\\ServiceFactory::registerService","\t98:      * @covers OAuth\\ServiceFactory::createService","\t99:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t100:      * @covers OAuth\\ServiceFactory::buildV1Service","\t102:     public function testCreateServiceOAuth1Registered()","\t106:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake');","\t110:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t111:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t114:         $this->assertInstanceOf('\\\\OAuth\\OAuth1\\Service\\\\ServiceInterface', $service);","\t115:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake', $service);","\t119:      * @covers OAuth\\ServiceFactory::registerService","\t120:      * @covers OAuth\\ServiceFactory::createService","\t121:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t122:      * @covers OAuth\\ServiceFactory::buildV1Service","\t124:     public function testCreateServiceOAuth1RegisteredAndNonRegisteredSameName()","\t128:         $factory->registerService('twitter', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake');","\t132:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t133:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t136:         $this->assertInstanceOf('\\\\OAuth\\OAuth1\\Service\\\\ServiceInterface', $service);","\t137:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake', $service);","\t141:      * @covers OAuth\\ServiceFactory::createService","\t142:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t143:      * @covers OAuth\\ServiceFactory::buildV2Service","\t144:      * @covers OAuth\\ServiceFactory::resolveScopes","\t146:     public function testCreateServiceOAuth2NonRegistered()","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t153:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t156:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\Facebook', $service);","\t160:      * @covers OAuth\\ServiceFactory::createService","\t161:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t162:      * @covers OAuth\\ServiceFactory::buildV2Service","\t163:      * @covers OAuth\\ServiceFactory::resolveScopes","\t165:     public function testCreateServiceOAuth2Registered()","\t169:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t173:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t174:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t177:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t178:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","\t182:      * @covers OAuth\\ServiceFactory::createService","\t183:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t184:      * @covers OAuth\\ServiceFactory::buildV2Service","\t185:      * @covers OAuth\\ServiceFactory::resolveScopes","\t187:     public function testCreateServiceOAuth2RegisteredAndNonRegisteredSameName()","\t191:         $factory->registerService('facebook', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t195:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t196:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t199:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t200:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","\t204:      * @covers OAuth\\ServiceFactory::registerService","\t205:      * @covers OAuth\\ServiceFactory::createService","\t206:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t207:      * @covers OAuth\\ServiceFactory::buildV1Service","\t211:         $this->setExpectedException('\\\\OAuth\\Common\\Exception\\Exception');","\t215:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake');","\t219:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t220:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t226:      * @covers OAuth\\ServiceFactory::createService","\t227:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t235:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t236:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t243:      * @covers OAuth\\ServiceFactory::registerService","\t244:      * @covers OAuth\\ServiceFactory::createService","\t245:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t246:      * @covers OAuth\\ServiceFactory::buildV2Service","\t247:      * @covers OAuth\\ServiceFactory::resolveScopes","\t249:     public function testCreateServicePrefersOauth2()","\t253:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth1\\\\Service\\\\Fake');","\t254:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t258:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t259:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t262:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t263:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","\t267:      * @covers OAuth\\ServiceFactory::createService","\t268:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t269:      * @covers OAuth\\ServiceFactory::buildV2Service","\t270:      * @covers OAuth\\ServiceFactory::resolveScopes","\t272:     public function testCreateServiceOAuth2RegisteredWithClassConstantsAsScope()","\t276:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t280:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t281:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t285:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t286:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","\t290:      * @covers OAuth\\ServiceFactory::createService","\t291:      * @covers OAuth\\ServiceFactory::getFullyQualifiedServiceName","\t292:      * @covers OAuth\\ServiceFactory::buildV2Service","\t293:      * @covers OAuth\\ServiceFactory::resolveScopes","\t295:     public function testCreateServiceOAuth2RegisteredWithCustomScope()","\t299:         $factory->registerService('foo', '\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake');","\t303:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t304:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t308:         $this->assertInstanceOf('\\\\OAuth\\OAuth2\\Service\\\\ServiceInterface', $service);","\t309:         $this->assertInstanceOf('\\\\OAuthTest\\\\Mocks\\\\OAuth2\\\\Service\\\\Fake', $service);","","/vendor/lusitanian/oauth/tests/Unit/Common/AutoloaderTest.php:","\t3: namespace OAuthTest\\Unit\\Commen\\Core;","\t5: use OAuth\\Common\\AutoLoader;","\t10:      * @covers OAuth\\Common\\AutoLoader::__construct","\t11:      * @covers OAuth\\Common\\AutoLoader::register","\t21:      * @covers OAuth\\Common\\AutoLoader::__construct","\t22:      * @covers OAuth\\Common\\AutoLoader::register","\t23:      * @covers OAuth\\Common\\AutoLoader::unregister","\t34:      * @covers OAuth\\Common\\AutoLoader::__construct","\t35:      * @covers OAuth\\Common\\AutoLoader::register","\t36:      * @covers OAuth\\Common\\AutoLoader::load","\t50:      * @covers OAuth\\Common\\AutoLoader::__construct","\t51:      * @covers OAuth\\Common\\AutoLoader::register","\t52:      * @covers OAuth\\Common\\AutoLoader::load","\t66:      * @covers OAuth\\Common\\AutoLoader::__construct","\t67:      * @covers OAuth\\Common\\AutoLoader::register","\t68:      * @covers OAuth\\Common\\AutoLoader::load","\t82:      * @covers OAuth\\Common\\AutoLoader::__construct","\t83:      * @covers OAuth\\Common\\AutoLoader::register","\t84:      * @covers OAuth\\Common\\AutoLoader::load","\t98:      * @covers OAuth\\Common\\AutoLoader::__construct","\t99:      * @covers OAuth\\Common\\AutoLoader::register","\t100:      * @covers OAuth\\Common\\AutoLoader::load","\t114:      * @covers OAuth\\Common\\AutoLoader::__construct","\t115:      * @covers OAuth\\Common\\AutoLoader::register","\t116:      * @covers OAuth\\Common\\AutoLoader::load","","/vendor/lusitanian/oauth/tests/Unit/Common/Consumer/CredentialsTest.php:","\t3: namespace OAuth\\Unit\\Common\\Consumer;","\t5: use OAuth\\Common\\Consumer\\Credentials;","\t10:      * @covers OAuth\\Common\\Consumer\\Credentials::__construct","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface', $credentials);","\t20:      * @covers OAuth\\Common\\Consumer\\Credentials::__construct","\t21:      * @covers OAuth\\Common\\Consumer\\Credentials::getConsumerId","\t31:      * @covers OAuth\\Common\\Consumer\\Credentials::__construct","\t32:      * @covers OAuth\\Common\\Consumer\\Credentials::getConsumerSecret","\t42:      * @covers OAuth\\Common\\Consumer\\Credentials::__construct","\t43:      * @covers OAuth\\Common\\Consumer\\Credentials::getCallbackUrl","","/vendor/lusitanian/oauth/tests/Unit/Common/Http/HttpClientsTest.php:","\t4:  * @category   OAuth","\t11: namespace OAuth\\Unit\\Common\\Http;","\t13: use OAuth\\Common\\Http\\Uri\\Uri;","\t14: use OAuth\\Common\\Http\\Uri\\UriInterface;","\t15: use OAuth\\Common\\Http\\Client;","\t20:      * @var object|\\OAuth\\Common\\Http\\Client\\ClientInterface[]","\t67:             $this->setExpectedException('OAuth\\Common\\Http\\Exception\\TokenResponseException');","","/vendor/lusitanian/oauth/tests/Unit/Common/Http/Client/AbstractClientTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Http;","\t8:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::__construct","\t12:         $client = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient');","\t14:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface', $client);","\t18:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::__construct","\t19:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::setMaxRedirects","\t23:         $client = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient');","\t25:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient', $client->setMaxRedirects(10));","\t26:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface', $client->setMaxRedirects(10));","\t30:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::__construct","\t31:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::setTimeout","\t35:         $client = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient');","\t37:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient', $client->setTimeout(25));","\t38:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface', $client->setTimeout(25));","\t42:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::__construct","\t43:      * @covers OAuth\\Common\\Http\\Client\\AbstractClient::normalizeHeaders","\t47:         $client = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient');","","/vendor/lusitanian/oauth/tests/Unit/Common/Http/Client/CurlClientTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Client\\CurlClient;","\t6: use OAuth\\Common\\Http\\Exception\\TokenResponseException;","\t17:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient', $client);","\t21:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::setForceSSL3","\t27:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\CurlClient', $client->setForceSSL3(true));","\t31:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t40:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t48:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t57:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t65:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t66:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t70:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t89:         $this->assertSame('PHPoAuthLib', $response['headers']['User-Agent']);","\t93:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t94:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t98:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t121:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t125:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t148:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t152:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t176:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t180:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t203:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t207:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t232:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t236:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t261:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t265:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t292:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t296:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t328:      * @covers OAuth\\Common\\Http\\Client\\CurlClient::retrieveResponse","\t332:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t334:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t360:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","","/vendor/lusitanian/oauth/tests/Unit/Common/Http/Client/StreamClientTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Http\\Client;","\t5: use OAuth\\Common\\Http\\Client\\StreamClient;","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\AbstractClient', $client);","\t20:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t29:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t37:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t54:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t55:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t59:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t78:         $this->assertSame('PHPoAuthLib', $response['headers']['User-Agent']);","\t82:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t83:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t87:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t110:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t111:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t115:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t138:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t139:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t143:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t167:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t168:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t172:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t195:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t196:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t200:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t225:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t226:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t230:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t255:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::retrieveResponse","\t256:      * @covers OAuth\\Common\\Http\\Client\\StreamClient::generateStreamContext","\t260:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t262:         $endPoint = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","","/vendor/lusitanian/oauth/tests/Unit/Common/Http/Uri/UriFactoryTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Http\\Uri;","\t5: use OAuth\\Common\\Http\\Uri\\UriFactory;","\t6: use OAuth\\Common\\Http\\Uri\\Uri;","\t17:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriFactoryInterface', $factory);","\t21:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t22:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t31:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t39:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t40:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t41:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t42:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t43:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t44:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t45:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t46:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t60:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t70:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t71:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t72:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t73:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t74:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t75:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t76:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t77:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t91:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t99:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t100:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t101:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t102:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t103:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t104:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t105:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t106:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t120:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t128:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t129:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t130:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t131:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t132:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t133:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t134:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t135:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t148:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t156:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t157:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t158:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t159:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t160:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t161:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t162:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t163:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t176:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t184:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t185:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t186:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t187:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t188:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t189:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t190:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t191:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t204:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t212:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t213:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t214:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t215:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t216:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t217:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t218:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t219:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t234:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t235:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t236:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t237:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t238:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t239:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t240:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t241:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t254:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t262:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t263:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t264:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t265:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t266:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t267:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t268:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t269:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t281:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t289:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromSuperGlobalArray","\t290:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::attemptProxyStyleParse","\t291:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectScheme","\t292:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectHost","\t293:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPort","\t294:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectPath","\t295:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::detectQuery","\t296:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromParts","\t308:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t316:      * @covers OAuth\\Common\\Http\\Uri\\UriFactory::createFromAbsolute","\t325:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","","/vendor/lusitanian/oauth/tests/Unit/Common/Http/Uri/UriTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Http\\Uri;","\t5: use OAuth\\Common\\Http\\Uri\\Uri;","\t10:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","\t20:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t21:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t32:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t33:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t43:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t44:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t45:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getScheme","\t55:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t56:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t57:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t58:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t59:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getUserInfo","\t69:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t70:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t71:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t72:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t73:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getUserInfo","\t83:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t84:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t85:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t86:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t87:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawUserInfo","\t97:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t98:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t99:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t100:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t101:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawUserInfo","\t111:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t112:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t113:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getHost","\t123:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t124:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t125:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPort","\t135:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t136:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t137:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPort","\t147:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t148:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t149:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPort","\t159:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t160:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t161:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPath","\t171:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t172:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t173:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPath","\t183:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t184:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t185:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getPath","\t195:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t196:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t197:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getQuery","\t207:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t208:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t209:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getQuery","\t219:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t220:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t221:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getFragment","\t231:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t232:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t233:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getFragment","\t243:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t244:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t245:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t255:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t256:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t257:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t267:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t268:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t269:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t270:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t271:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t281:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t282:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t283:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t284:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t285:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t295:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t296:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t297:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t298:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t299:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAuthority","\t309:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t310:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t311:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t321:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t322:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t323:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t333:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t334:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t335:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t336:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t337:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t347:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t348:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t349:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t350:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t351:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t361:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t362:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t363:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t364:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t365:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t375:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t376:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t377:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t387:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t388:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t389:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t390:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t391:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t392:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t402:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t403:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t404:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t414:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t415:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t416:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t426:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t427:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t428:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t438:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t439:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t440:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t450:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t451:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t452:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t462:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t463:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t464:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRelativeUri","\t474:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t475:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t476:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRelativeUri","\t486:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t487:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t488:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRelativeUri","\t498:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t499:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t500:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t510:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t511:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t512:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t513:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t514:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getRawAuthority","\t515:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t525:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t526:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t527:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t537:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t538:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t539:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t549:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t550:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t551:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t561:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t562:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t563:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t573:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t574:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t575:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__toString","\t585:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t586:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t587:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPath","\t588:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t599:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t600:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t601:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPath","\t602:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t613:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t614:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t615:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPath","\t616:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t627:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t628:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t629:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setQuery","\t630:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t641:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t642:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t643:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setQuery","\t644:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t655:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t656:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t657:      * @covers OAuth\\Common\\Http\\Uri\\Uri::addToQuery","\t658:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t669:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t670:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t671:      * @covers OAuth\\Common\\Http\\Uri\\Uri::addToQuery","\t672:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t683:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t684:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t685:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setFragment","\t686:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t697:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t698:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t699:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setFragment","\t700:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t711:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t712:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t713:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setScheme","\t714:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t725:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t726:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t727:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setScheme","\t728:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t739:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t740:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t741:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t742:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t753:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t754:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t755:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setUserInfo","\t756:      * @covers OAuth\\Common\\Http\\Uri\\Uri::protectUserInfo","\t757:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t768:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t769:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t770:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t771:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t782:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t783:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t784:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t785:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t796:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t797:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t798:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t799:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t810:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t811:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t812:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t813:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t824:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t825:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t826:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setPort","\t827:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t838:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t839:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t840:      * @covers OAuth\\Common\\Http\\Uri\\Uri::setHost","\t841:      * @covers OAuth\\Common\\Http\\Uri\\Uri::getAbsoluteUri","\t852:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t853:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t854:      * @covers OAuth\\Common\\Http\\Uri\\Uri::hasExplicitTrailingHostSlash","\t864:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t865:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t866:      * @covers OAuth\\Common\\Http\\Uri\\Uri::hasExplicitTrailingHostSlash","\t876:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t877:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t878:      * @covers OAuth\\Common\\Http\\Uri\\Uri::hasExplicitPortSpecified","\t888:      * @covers OAuth\\Common\\Http\\Uri\\Uri::__construct","\t889:      * @covers OAuth\\Common\\Http\\Uri\\Uri::parseUri","\t890:      * @covers OAuth\\Common\\Http\\Uri\\Uri::hasExplicitPortSpecified","","/vendor/lusitanian/oauth/tests/Unit/Common/Service/AbstractServiceTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Service;","\t5: use OAuthTest\\Mocks\\Common\\Service\\Mock;","\t10:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t15:             '\\\\OAuth\\\\Common\\\\Service\\\\AbstractService',","\t17:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t18:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t19:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t23:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Service\\\\ServiceInterface', $service);","\t27:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t28:      * @covers OAuth\\Common\\Service\\AbstractService::getStorage","\t33:             '\\\\OAuth\\\\Common\\\\Service\\\\AbstractService',","\t35:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t36:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t37:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t41:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $service->getStorage());","\t45:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t46:      * @covers OAuth\\Common\\Service\\AbstractService::service","\t51:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t52:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t53:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t60:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t61:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t66:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t67:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t68:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t72:             '\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface',","\t73:             $service->testDetermineRequestUriFromPath($this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'))","\t78:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t79:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t84:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t85:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t86:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t91:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","\t96:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t97:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t104:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t109:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","\t114:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t115:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t119:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Exception\\\\Exception');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t131:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t132:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t137:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t138:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t139:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t144:             new \\OAuth\\Common\\Http\\Uri\\Uri('https://example.com')","\t147:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","\t152:      * @covers OAuth\\Common\\Service\\AbstractService::__construct","\t153:      * @covers OAuth\\Common\\Service\\AbstractService::determineRequestUriFromPath","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t159:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t165:             new \\OAuth\\Common\\Http\\Uri\\Uri('https://example.com')","\t168:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface', $uri);","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/MemoryTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Storage;","\t5: use OAuth\\Common\\Storage\\Memory;","\t10:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t20:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t21:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t28:             '\\\\OAuth\\\\Common\\\\Storage\\\\Memory',","\t29:             $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'))","\t34:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t35:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t36:      * @covers OAuth\\Common\\Storage\\Memory::retrieveAccessToken","\t37:      * @covers OAuth\\Common\\Storage\\Memory::hasAccessToken","\t43:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t45:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface', $storage->retrieveAccessToken('foo'));","\t49:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t50:      * @covers OAuth\\Common\\Storage\\Memory::retrieveAccessToken","\t51:      * @covers OAuth\\Common\\Storage\\Memory::hasAccessToken","\t55:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Storage\\\\Exception\\\\TokenNotFoundException');","\t63:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t64:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t65:      * @covers OAuth\\Common\\Storage\\Memory::hasAccessToken","\t71:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t77:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t78:      * @covers OAuth\\Common\\Storage\\Memory::hasAccessToken","\t88:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t89:      * @covers OAuth\\Common\\Storage\\Memory::clearToken","\t95:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Memory', $storage->clearToken('foo'));","\t99:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t100:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t101:      * @covers OAuth\\Common\\Storage\\Memory::clearToken","\t107:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t110:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Memory', $storage->clearToken('foo'));","\t115:      * @covers OAuth\\Common\\Storage\\Memory::__construct","\t116:      * @covers OAuth\\Common\\Storage\\Memory::storeAccessToken","\t117:      * @covers OAuth\\Common\\Storage\\Memory::clearAllTokens","\t123:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t124:         $storage->storeAccessToken('bar', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t128:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Memory', $storage->clearAllTokens());","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/RedisTest.php:","\t4:  * @category   OAuth","\t11: namespace OAuth\\Unit\\Common\\Storage;","\t13: use OAuth\\Common\\Storage\\Redis;","\t15: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t57:         $token_1 = new StdOAuth2Token('access_1', 'refresh_1', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t58:         $token_2 = new StdOAuth2Token('access_2', 'refresh_2', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t92:         $token = new StdOAuth2Token('access', 'refresh', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t99:         $this->setExpectedException('OAuth\\Common\\Storage\\Exception\\TokenNotFoundException');","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/SessionTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Storage;","\t5: use OAuth\\Common\\Storage\\Session;","\t10:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t18:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t22:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t32:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t36:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t46:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t50:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t58:         $_SESSION['lusitanian_oauth_token'] = array();","\t62:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $storage);","\t66:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t67:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t76:             '\\\\OAuth\\\\Common\\\\Storage\\\\Session',","\t77:             $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'))","\t82:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t83:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t91:         $_SESSION['lusitanian_oauth_token'] = 'foo';","\t94:             '\\\\OAuth\\\\Common\\\\Storage\\\\Session',","\t95:             $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'))","\t100:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t101:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t102:      * @covers OAuth\\Common\\Storage\\Session::retrieveAccessToken","\t103:      * @covers OAuth\\Common\\Storage\\Session::hasAccessToken","\t111:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t113:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface', $storage->retrieveAccessToken('foo'));","\t117:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t118:      * @covers OAuth\\Common\\Storage\\Session::retrieveAccessToken","\t119:      * @covers OAuth\\Common\\Storage\\Session::hasAccessToken","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Storage\\\\Exception\\\\TokenNotFoundException');","\t133:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t134:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t135:      * @covers OAuth\\Common\\Storage\\Session::hasAccessToken","\t143:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t149:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t150:      * @covers OAuth\\Common\\Storage\\Session::hasAccessToken","\t162:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t163:      * @covers OAuth\\Common\\Storage\\Session::clearToken","\t171:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Session', $storage->clearToken('foo'));","\t175:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t176:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t177:      * @covers OAuth\\Common\\Storage\\Session::clearToken","\t185:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t188:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Session', $storage->clearToken('foo'));","\t193:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t194:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t195:      * @covers OAuth\\Common\\Storage\\Session::clearAllTokens","\t203:         $storage->storeAccessToken('foo', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t204:         $storage->storeAccessToken('bar', $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface'));","\t208:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\Session', $storage->clearAllTokens());","\t214:      * @covers OAuth\\Common\\Storage\\Session::__construct","\t215:      * @covers OAuth\\Common\\Storage\\Session::__destruct","\t227:      * @covers OAuth\\Common\\Storage\\Session::storeAccessToken","\t228:      * @covers OAuth\\Common\\Storage\\Session::retrieveAccessToken","\t234:         $mock = $this->getMock('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('__sleep'));","\t243:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', $retrievedToken);","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/StorageTest.php:","\t4:  * @category   OAuth","\t12: namespace OAuth\\Unit\\Common\\Storage;","\t14: use \\OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t29:         $token_1 = new StdOAuth2Token('access_1', 'refresh_1', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t30:         $token_2 = new StdOAuth2Token('access_2', 'refresh_2', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t64:         $token = new StdOAuth2Token('access', 'refresh', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t71:         $this->setExpectedException('OAuth\\Common\\Storage\\Exception\\TokenNotFoundException');","","/vendor/lusitanian/oauth/tests/Unit/Common/Storage/SymfonySessionTest.php:","\t4:  * @category   OAuth","\t11: namespace OAuth\\Unit\\Common\\Storage;","\t13: use OAuth\\Common\\Storage\\SymfonySession;","\t14: use OAuth\\OAuth2\\Token\\StdOAuth2Token;","\t44:         $token = new StdOAuth2Token('access', 'refresh', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t66:         $token_1 = new StdOAuth2Token('access_1', 'refresh_1', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t67:         $token_2 = new StdOAuth2Token('access_2', 'refresh_2', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t101:         $token = new StdOAuth2Token('access', 'refresh', StdOAuth2Token::EOL_NEVER_EXPIRES, array('extra' => 'param'));","\t108:         $this->setExpectedException('OAuth\\Common\\Storage\\Exception\\TokenNotFoundException');","","/vendor/lusitanian/oauth/tests/Unit/Common/Token/AbstractTokenTest.php:","\t3: namespace OAuthTest\\Unit\\Common\\Token;","\t5: use \\OAuth\\Common\\Token\\AbstractToken;","\t10:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t14:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\TokenInterface', $token);","\t20:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t21:      * @covers OAuth\\Common\\Token\\AbstractToken::getAccessToken","\t25:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t31:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t32:      * @covers OAuth\\Common\\Token\\AbstractToken::getAccessToken","\t36:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo'));","\t42:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t43:      * @covers OAuth\\Common\\Token\\AbstractToken::getAccessToken","\t44:      * @covers OAuth\\Common\\Token\\AbstractToken::setAccessToken","\t48:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t56:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t57:      * @covers OAuth\\Common\\Token\\AbstractToken::getRefreshToken","\t61:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t67:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t68:      * @covers OAuth\\Common\\Token\\AbstractToken::getRefreshToken","\t72:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar'));","\t78:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t79:      * @covers OAuth\\Common\\Token\\AbstractToken::getRefreshToken","\t80:      * @covers OAuth\\Common\\Token\\AbstractToken::setRefreshToken","\t84:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t92:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t93:      * @covers OAuth\\Common\\Token\\AbstractToken::getExtraParams","\t97:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t103:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t104:      * @covers OAuth\\Common\\Token\\AbstractToken::getExtraParams","\t108:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar', null, array('foo', 'bar')));","\t114:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t115:      * @covers OAuth\\Common\\Token\\AbstractToken::setExtraParams","\t116:      * @covers OAuth\\Common\\Token\\AbstractToken::getExtraParams","\t120:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t128:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t129:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t130:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t134:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","\t140:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t141:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t142:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t146:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar', 0));","\t152:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t153:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t154:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t158:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar', AbstractToken::EOL_NEVER_EXPIRES));","\t164:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t165:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t166:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t170:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', array('foo', 'bar', 5 * 60));","\t176:      * @covers OAuth\\Common\\Token\\AbstractToken::__construct","\t177:      * @covers OAuth\\Common\\Token\\AbstractToken::setLifetime","\t178:      * @covers OAuth\\Common\\Token\\AbstractToken::getEndOfLife","\t179:      * @covers OAuth\\Common\\Token\\AbstractToken::setEndOfLife","\t183:         $token = $this->getMockForAbstractClass('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken');","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/AbstractServiceTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuthTest\\Mocks\\OAuth1\\Service\\Mock;","\t10:      * @covers OAuth\\OAuth1\\Service\\AbstractService::__construct","\t15:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService',","\t17:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t18:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t19:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t20:                 $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t21:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t25:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t29:      * @covers OAuth\\OAuth1\\Service\\AbstractService::__construct","\t34:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService',","\t36:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t37:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t38:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t39:                 $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t40:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t44:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Service\\\\AbstractService', $service);","\t48:      * @covers OAuth\\OAuth1\\Service\\AbstractService::requestRequestToken","\t49:      * @covers OAuth\\OAuth1\\Service\\AbstractService::buildAuthorizationHeaderForTokenRequest","\t50:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getBasicAuthorizationHeaderInfo","\t51:      * @covers OAuth\\OAuth1\\Service\\AbstractService::generateNonce","\t52:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getSignatureMethod","\t53:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getVersion","\t54:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getExtraOAuthHeaders","\t55:      * @covers OAuth\\OAuth1\\Service\\AbstractService::parseRequestTokenResponse","\t59:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t65:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t67:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t68:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t69:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t72:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t76:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAuthorizationUri","\t77:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAuthorizationEndpoint","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t85:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t86:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t93:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAuthorizationUri","\t94:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAuthorizationEndpoint","\t99:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t113:      * @covers OAuth\\OAuth1\\Service\\AbstractService::requestAccessToken","\t114:      * @covers OAuth\\OAuth1\\Service\\AbstractService::service","\t115:      * @covers OAuth\\OAuth1\\Service\\AbstractService::buildAuthorizationHeaderForAPIRequest","\t116:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getBasicAuthorizationHeaderInfo","\t117:      * @covers OAuth\\OAuth1\\Service\\AbstractService::generateNonce","\t118:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getSignatureMethod","\t119:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getVersion","\t120:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAccessTokenEndpoint","\t121:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getExtraOAuthHeaders","\t122:      * @covers OAuth\\OAuth1\\Service\\AbstractService::parseAccessTokenResponse","\t126:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t131:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t134:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t138:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t141:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar'));","\t149:      * @covers OAuth\\OAuth1\\Service\\AbstractService::requestAccessToken","\t150:      * @covers OAuth\\OAuth1\\Service\\AbstractService::service","\t151:      * @covers OAuth\\OAuth1\\Service\\AbstractService::buildAuthorizationHeaderForAPIRequest","\t152:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getBasicAuthorizationHeaderInfo","\t153:      * @covers OAuth\\OAuth1\\Service\\AbstractService::generateNonce","\t154:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getSignatureMethod","\t155:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getVersion","\t156:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getAccessTokenEndpoint","\t157:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getExtraOAuthHeaders","\t158:      * @covers OAuth\\OAuth1\\Service\\AbstractService::parseAccessTokenResponse","\t162:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t169:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t173:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t176:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t177:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t180:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t184:      * @covers OAuth\\OAuth1\\Service\\AbstractService::request","\t185:      * @covers OAuth\\OAuth1\\Service\\AbstractService::determineRequestUriFromPath","\t186:      * @covers OAuth\\OAuth1\\Service\\AbstractService::service","\t187:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getExtraApiHeaders","\t188:      * @covers OAuth\\OAuth1\\Service\\AbstractService::buildAuthorizationHeaderForAPIRequest","\t189:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getBasicAuthorizationHeaderInfo","\t190:      * @covers OAuth\\OAuth1\\Service\\AbstractService::generateNonce","\t191:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getSignatureMethod","\t192:      * @covers OAuth\\OAuth1\\Service\\AbstractService::getVersion","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t199:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t202:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t206:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t209:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t210:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t219:      * @covers OAuth\\OAuth1\\Service\\AbstractService::request","\t223:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t226:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t228:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t232:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t235:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t236:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/BitBucketTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\BitBucket;","\t10:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://bitbucket.org/!api/1.0/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://bitbucket.org/!api/1.0/oauth/authenticate',","\t94:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://bitbucket.org/!api/1.0/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\BitBucket::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\BitBucket::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\BitBucket::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/EtsyTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Etsy;","\t10:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://openapi.etsy.com/v2/oauth/request_token',","\t76:             'https://openapi.etsy.com/v2/oauth/request_token?scope=email_r%20cart_rw',","\t83:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t84:      * @covers OAuth\\OAuth1\\Service\\Etsy::getAuthorizationEndpoint","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t90:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t91:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t92:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t102:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t103:      * @covers OAuth\\OAuth1\\Service\\Etsy::getAccessTokenEndpoint","\t108:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t109:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t110:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t111:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t115:             'https://openapi.etsy.com/v2/oauth/access_token',","\t121:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t122:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t123:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t127:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t131:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t133:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t134:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t137:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t143:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t144:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t145:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t149:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t153:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t155:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t156:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t159:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t165:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t166:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t167:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t171:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t175:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t177:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t178:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t181:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t187:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t188:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t189:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t193:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t195:             'oauth_callback_confirmed=false'","\t199:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t201:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t205:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t211:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t212:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t213:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseRequestTokenResponse","\t214:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseAccessTokenResponse","\t218:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t220:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t224:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t226:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t227:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t230:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t234:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t235:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t236:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseAccessTokenResponse","\t240:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t243:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t245:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t249:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t252:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t255:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t261:      * @covers OAuth\\OAuth1\\Service\\Etsy::__construct","\t262:      * @covers OAuth\\OAuth1\\Service\\Etsy::getRequestTokenEndpoint","\t263:      * @covers OAuth\\OAuth1\\Service\\Etsy::parseAccessTokenResponse","\t267:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t269:             'oauth_token=foo&oauth_token_secret=bar'","\t272:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t274:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t278:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t281:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t284:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/FitBitTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\FitBit;","\t10:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://api.fitbit.com/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\FitBit::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://www.fitbit.com/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\FitBit::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://api.fitbit.com/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\FitBit::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\FitBit::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\FitBit::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/FiveHundredPx.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\FiveHundredPx;","\t10:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://api.500px.com/v1/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://api.500px.com/v1/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://api.500px.com/v1/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\FiveHundredPx::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/FlickrTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Flickr;","\t10:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://www.flickr.com/services/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\Flickr::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://www.flickr.com/services/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\Flickr::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://www.flickr.com/services/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\Flickr::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\Flickr::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\Flickr::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t280:      * @covers OAuth\\OAuth1\\Service\\Flickr::request","\t284:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t287:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t289:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t293:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t296:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t297:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/QuickBooksTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\Common\\Http\\Client\\ClientInterface;","\t6: use OAuth\\Common\\Storage\\TokenStorageInterface;","\t7: use OAuth\\Common\\Token\\TokenInterface;","\t8: use OAuth\\OAuth1\\Service\\QuickBooks;","\t16:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface',","\t25:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService',","\t33:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t34:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t35:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t36:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t37:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t41:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService',","\t50:             'https://oauth.intuit.com/oauth/v1/get_request_token',","\t68:             'https://oauth.intuit.com/oauth/v1/get_access_token',","\t74:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t85:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t96:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t107:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t113:             'oauth_callback_confirmed=false'","\t122:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t126:             '\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token',","\t132:      * @expectedException \\OAuth\\Common\\Http\\Exception\\TokenResponseException","\t137:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t148:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t151:             'oauth_token=foo&oauth_token_secret=bar'","\t155:             '\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token',","\t167:                 '\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'","\t173:                 '\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'","\t178:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t181:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t192:             '\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'","\t204:             '\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/ScoopItTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\ScoopIt;","\t10:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://www.scoop.it/oauth/request',","\t75:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://www.scoop.it/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://www.scoop.it/oauth/access',","\t113:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t280:      * @covers OAuth\\OAuth1\\Service\\ScoopIt::request","\t284:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t287:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t289:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t293:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t296:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t297:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/TumblrTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Tumblr;","\t10:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://www.tumblr.com/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://www.tumblr.com/oauth/authorize',","\t94:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://www.tumblr.com/oauth/access_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\Tumblr::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\Tumblr::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\Tumblr::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/TwitterTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Twitter;","\t10:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://api.twitter.com/oauth/request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\Twitter::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t90:                 array(\\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHENTICATE, \\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHORIZE)","\t94:         $service->setAuthorizationEndpoint( \\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHORIZE );","\t99:                 array(\\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHENTICATE, \\OAuth\\OAuth1\\Service\\Twitter::ENDPOINT_AUTHORIZE)","\t105:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t106:      * @covers OAuth\\OAuth1\\Service\\Twitter::setAuthorizationEndpoint","\t111:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t112:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t113:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t114:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t117:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Exception\\\\Exception');","\t123:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t124:      * @covers OAuth\\OAuth1\\Service\\Twitter::getAccessTokenEndpoint","\t129:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t131:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t132:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t136:             'https://api.twitter.com/oauth/access_token',","\t142:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t143:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t144:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t148:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t154:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t155:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t158:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t164:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t165:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t166:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t170:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t174:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t176:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t177:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t180:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t186:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t187:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t188:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t192:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t196:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t198:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t199:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t202:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t208:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t209:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t210:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t214:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t216:             'oauth_callback_confirmed=false'","\t220:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t222:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t223:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t226:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t232:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t233:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t234:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseRequestTokenResponse","\t235:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t239:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t241:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t245:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t247:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t248:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t251:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t255:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t256:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t257:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t261:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t282:      * @covers OAuth\\OAuth1\\Service\\Twitter::__construct","\t283:      * @covers OAuth\\OAuth1\\Service\\Twitter::getRequestTokenEndpoint","\t284:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t288:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t290:             'oauth_token=foo&oauth_token_secret=bar'","\t293:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t295:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t299:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t302:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t305:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t309:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t313:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t315:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t317:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t318:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t321:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t328:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t332:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t334:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t336:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t337:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t340:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t347:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t349:     public function testParseAccessTokenErrorItsMissingOauthToken()","\t351:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t353:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t355:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t356:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t359:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t362:         $method->invokeArgs($service, array(\"oauth_token_secret=1\"));","\t366:      * @covers OAuth\\OAuth1\\Service\\Twitter::parseAccessTokenResponse","\t368:     public function testParseAccessTokenErrorItsMissingOauthTokenSecret()","\t370:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t372:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t374:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t375:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t378:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t381:         $method->invokeArgs($service, array(\"oauth_token=1\"));","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/XingTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Xing;","\t18:         $this->client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t19:         $this->storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t22:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t25:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t30:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t35:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $this->xing","\t40:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t45:             '\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $this->xing","\t50:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t55:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t58:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t59:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t62:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t66:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t67:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t78:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t79:      * @covers OAuth\\OAuth1\\Service\\Xing::getAuthorizationEndpoint","\t90:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t91:      * @covers OAuth\\OAuth1\\Service\\Xing::getAccessTokenEndpoint","\t102:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t103:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t104:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t113:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t119:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t120:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t121:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t130:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t136:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t137:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t138:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t154:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t155:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t162:             ->will($this->returnValue('oauth_callback_confirmed=false'));","\t164:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t170:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t171:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t172:      * @covers OAuth\\OAuth1\\Service\\Xing::parseRequestTokenResponse","\t173:      * @covers OAuth\\OAuth1\\Service\\Xing::parseAccessTokenResponse","\t181:                 'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t185:             '\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token',","\t191:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t192:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t193:      * @covers OAuth\\OAuth1\\Service\\Xing::parseAccessTokenResponse","\t200:             ->will($this->returnValue('{\"message\":\"Invalid OAuth signature\",\"error_name\":\"INVALID_OAUTH_SIGNATURE\"}'));","\t202:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t209:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t215:      * @covers OAuth\\OAuth1\\Service\\Xing::__construct","\t216:      * @covers OAuth\\OAuth1\\Service\\Xing::getRequestTokenEndpoint","\t217:      * @covers OAuth\\OAuth1\\Service\\Xing::parseAccessTokenResponse","\t224:             ->will($this->returnValue('oauth_token=foo&oauth_token_secret=bar'));","\t226:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t235:             '\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token',","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Service/YahooTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Service;","\t5: use OAuth\\OAuth1\\Service\\Yahoo;","\t10:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t15:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t57:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t65:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t69:             'https://api.login.yahoo.com/oauth/v2/get_request_token',","\t75:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t76:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getAuthorizationEndpoint","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t83:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t84:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t88:             'https://api.login.yahoo.com/oauth/v2/request_auth',","\t94:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t95:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getAccessTokenEndpoint","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t103:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t107:             'https://api.login.yahoo.com/oauth/v2/get_token',","\t113:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t114:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t115:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t119:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t136:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t137:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t151:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t157:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t158:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t159:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t180:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t181:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t185:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             'oauth_callback_confirmed=false'","\t191:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t193:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t194:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t197:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t203:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t204:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t205:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseRequestTokenResponse","\t206:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseAccessTokenResponse","\t210:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:             'oauth_callback_confirmed=true&oauth_token=foo&oauth_token_secret=bar'","\t216:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t218:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t219:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t222:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestRequestToken());","\t226:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t227:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t228:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseAccessTokenResponse","\t232:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t235:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t237:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t241:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t244:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t247:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t253:      * @covers OAuth\\OAuth1\\Service\\Yahoo::__construct","\t254:      * @covers OAuth\\OAuth1\\Service\\Yahoo::getRequestTokenEndpoint","\t255:      * @covers OAuth\\OAuth1\\Service\\Yahoo::parseAccessTokenResponse","\t259:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t261:             'oauth_token=foo&oauth_token_secret=bar'","\t264:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t266:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t270:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t273:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface')","\t276:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\StdOAuth1Token', $service->requestAccessToken('foo', 'bar', $token));","\t280:      * @covers OAuth\\OAuth1\\Service\\Yahoo::request","\t284:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t287:         $token = $this->getMock('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface');","\t289:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t293:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t296:             $this->getMock('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface'),","\t297:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Signature/SignatureTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Signature;","\t5: use OAuth\\OAuth1\\Signature\\Signature;","\t10:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t14:         $signature = new Signature($this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'));","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Signature\\\\SignatureInterface', $signature);","\t20:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t21:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t25:         $signature = new Signature($this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'));","\t31:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t32:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t36:         $signature = new Signature($this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'));","\t42:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t43:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t44:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t45:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t46:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t47:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t48:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t52:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t63:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t81:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t82:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t83:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t84:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t85:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t86:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t87:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t91:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t102:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t120:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t121:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t122:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t123:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t124:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t125:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t126:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t130:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t141:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t159:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t160:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t161:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t162:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t163:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t164:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t165:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t169:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t180:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t201:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t202:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t203:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t204:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t205:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t206:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t207:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t211:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t222:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t243:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t244:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t245:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t246:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t247:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t248:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t249:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t253:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t263:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","\t284:      * @covers OAuth\\OAuth1\\Signature\\Signature::__construct","\t285:      * @covers OAuth\\OAuth1\\Signature\\Signature::setHashingAlgorithm","\t286:      * @covers OAuth\\OAuth1\\Signature\\Signature::setTokenSecret","\t287:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSignature","\t288:      * @covers OAuth\\OAuth1\\Signature\\Signature::buildSignatureDataString","\t289:      * @covers OAuth\\OAuth1\\Signature\\Signature::hash","\t290:      * @covers OAuth\\OAuth1\\Signature\\Signature::getSigningKey","\t294:         $this->setExpectedException('\\\\OAuth\\\\OAuth1\\\\Signature\\\\Exception\\\\UnsupportedHashAlgorithmException');","\t296:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t306:         $uri = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface');","","/vendor/lusitanian/oauth/tests/Unit/OAuth1/Token/StdOAuth1TokenTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth1\\Token;","\t5: use OAuth\\OAuth1\\Token\\StdOAuth1Token;","\t7: class StdOAuth1TokenTest extends \\PHPUnit_Framework_TestCase","\t14:         $token = new StdOAuth1Token();","\t16:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth1\\\\Token\\\\TokenInterface', $token);","\t17:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Token\\\\AbstractToken', $token);","\t21:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setRequestToken","\t25:         $token = new StdOAuth1Token();","\t31:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setRequestToken","\t32:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::getRequestToken","\t36:         $token = new StdOAuth1Token();","\t43:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setRequestTokenSecret","\t47:         $token = new StdOAuth1Token();","\t53:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setRequestTokenSecret","\t54:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::getRequestTokenSecret","\t58:         $token = new StdOAuth1Token();","\t65:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setAccessTokenSecret","\t69:         $token = new StdOAuth1Token();","\t75:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::setAccessTokenSecret","\t76:      * @covers OAuth\\OAuth1\\Token\\StdOAuth1Token::getAccessTokenSecret","\t80:         $token = new StdOAuth1Token();","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/AbstractServiceTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuthTest\\Mocks\\OAuth2\\Service\\Mock;","\t6: use OAuth\\Common\\Http\\Uri\\Uri;","\t7: use OAuth\\Common\\Token\\TokenInterface;","\t12:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t17:             '\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService',","\t19:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t20:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t21:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t26:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t30:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t35:             '\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService',","\t37:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t38:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t39:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t44:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Service\\\\AbstractService', $service);","\t48:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t53:             '\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService',","\t55:                 $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t56:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t57:                 $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t59:                 $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface'),","\t63:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Service\\\\AbstractService', $service);","\t67:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t68:      * @covers OAuth\\OAuth2\\Service\\AbstractService::isValidScope","\t72:         $this->setExpectedException('\\\\OAuth\\\\OAuth2\\\\Service\\\\Exception\\\\InvalidScopeException');","\t75:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t83:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t84:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationUri","\t85:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationEndpoint","\t89:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t95:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t96:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t106:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t107:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationUri","\t108:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationEndpoint","\t112:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t118:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t119:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t129:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t130:      * @covers OAuth\\OAuth2\\Service\\AbstractService::isValidScope","\t131:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationUri","\t132:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationEndpoint","\t136:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t154:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t155:      * @covers OAuth\\OAuth2\\Service\\AbstractService::requestAccessToken","\t156:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAccessTokenEndpoint","\t157:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraOAuthHeaders","\t158:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t159:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t165:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t166:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t169:         $this->assertInstanceof('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('code'));","\t173:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t175:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t181:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t184:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t189:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t193:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Token\\\\Exception\\\\ExpiredTokenException', 'Token expired on 03/26/1984 at 12:00:00 AM');","\t199:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t200:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t201:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t202:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationMethod","\t203:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t204:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t205:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraApiHeaders","\t207:     public function testRequestOauthAuthorizationMethod()","\t209:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t212:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t216:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t220:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t228:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t232:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t233:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t234:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t235:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationMethod","\t236:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t237:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t238:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraApiHeaders","\t242:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t245:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t249:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t253:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t267:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t268:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t269:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t270:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationMethod","\t271:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t272:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t273:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraApiHeaders","\t277:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t280:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t284:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t288:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t298:         $this->assertSame('oauth2_access_token=foo', $absoluteUri['query']);","\t302:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t303:      * @covers OAuth\\OAuth2\\Service\\AbstractService::request","\t304:      * @covers OAuth\\OAuth2\\Service\\AbstractService::determineRequestUriFromPath","\t305:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAuthorizationMethod","\t306:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t307:      * @covers OAuth\\OAuth2\\Service\\AbstractService::service","\t308:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraApiHeaders","\t312:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t315:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t319:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t323:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t337:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t338:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getStorage","\t343:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t344:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t345:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t348:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface', $service->getStorage());","\t352:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t353:      * @covers OAuth\\OAuth2\\Service\\AbstractService::refreshAccessToken","\t354:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getAccessTokenEndpoint","\t355:      * @covers OAuth\\OAuth2\\Service\\AbstractService::getExtraOAuthHeaders","\t356:      * @covers OAuth\\OAuth2\\Service\\AbstractService::parseAccessTokenResponse","\t361:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t362:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t363:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t366:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token');","\t369:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->refreshAccessToken($token));","\t373:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t374:      * @covers OAuth\\OAuth2\\Service\\AbstractService::isValidScope","\t379:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t380:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t381:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t388:      * @covers OAuth\\OAuth2\\Service\\AbstractService::__construct","\t389:      * @covers OAuth\\OAuth2\\Service\\AbstractService::isValidScope","\t394:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t395:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t396:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/AmazonTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Amazon;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Amazon::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t70:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Amazon::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Amazon::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\Amazon::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\Amazon::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/BitlyTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Bitly;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Bitly::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://bitly.com/oauth/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Bitly::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api-ssl.bitly.com/oauth/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Bitly::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Bitly::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Bitly::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Bitly::parseAccessTokenResponse","\t135:      * @covers OAuth\\OAuth2\\Service\\Bitly::requestAccessToken","\t139:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t148:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/Bitrix24.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Bitrix24;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t20:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t23:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t27:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t28:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::getAuthorizationEndpoint","\t33:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t34:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t35:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t37:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t40:         $this->assertSame('https://bitrix24.com/oauth/authorize/', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t44:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t45:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::getAccessTokenEndpoint","\t50:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t51:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t52:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t54:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t57:         $this->assertSame('https://bitrix24.com/oauth/token/', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t61:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t62:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::getAuthorizationMethod","\t66:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t69:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t73:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t91:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t104:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t107:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t113:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t136:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::parseAccessTokenResponse","\t140:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t146:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t151:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t155:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::__construct","\t156:      * @covers OAuth\\OAuth2\\Service\\Bitrix24::getExtraOAuthHeaders","\t158:     public function testGetExtraOAuthHeaders()","\t160:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t171:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t173:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t176:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/BoxTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Box;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Box::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://www.box.com/api/oauth2/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Box::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://www.box.com/api/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Box::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\Box::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/BufferTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Buffer;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Buffer::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://bufferapp.com/oauth2/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Buffer::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api.bufferapp.com/1/oauth2/token.json', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Buffer::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Buffer::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Buffer::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Buffer::parseAccessTokenResponse","\t135:      * @covers OAuth\\OAuth2\\Service\\Buffer::requestAccessToken","\t139:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t148:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DailymotionTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Dailymotion;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://api.dailymotion.com/oauth/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api.dailymotion.com/oauth/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t109:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t113:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t209:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::__construct","\t210:      * @covers OAuth\\OAuth2\\Service\\Dailymotion::getExtraOAuthHeaders","\t212:     public function testGetExtraOAuthHeaders()","\t214:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t223:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t225:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t228:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DeezerTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Deezer;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Deezer::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://connect.deezer.com/oauth/auth.php',","\t73:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Deezer::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://connect.deezer.com/oauth/access_token.php',","\t91:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Deezer::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Deezer::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Deezer::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Deezer::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Deezer::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DeliciousTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Delicious;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Delicious::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t73:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Delicious::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://avosapi.delicious.com/api/v1/oauth/token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Delicious::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t105:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t111:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t112:      * @covers OAuth\\OAuth2\\Service\\Delicious::parseAccessTokenResponse","\t116:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t131:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t132:      * @covers OAuth\\OAuth2\\Service\\Delicious::parseAccessTokenResponse","\t136:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t140:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t149:      * @covers OAuth\\OAuth2\\Service\\Delicious::__construct","\t150:      * @covers OAuth\\OAuth2\\Service\\Delicious::parseAccessTokenResponse","\t154:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t163:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DeviantArtTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\DeviantArt;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://www.deviantart.com/oauth2/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://www.deviantart.com/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t89:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t92:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t96:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t108:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t112:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t113:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::parseAccessTokenResponse","\t117:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t121:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t126:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t132:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t133:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::parseAccessTokenResponse","\t137:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t141:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t146:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t150:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::__construct","\t151:      * @covers OAuth\\OAuth2\\Service\\DeviantArt::parseAccessTokenResponse","\t155:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t159:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t161:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t164:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/DropboxTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Dropbox;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAuthorizationUri","\t60:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t66:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t67:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t71:             'https://www.dropbox.com/1/oauth2/authorize?client_id=foo&redirect_uri=bar&response_type=code&scope=',","\t77:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t78:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAuthorizationUri","\t82:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t88:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t93:             'https://www.dropbox.com/1/oauth2/authorize?client_id=foo&redirect_uri=bar&response_type=code&scope=',","\t99:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t100:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAuthorizationEndpoint","\t105:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t106:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t110:         $this->assertSame('https://www.dropbox.com/1/oauth2/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t114:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t115:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAccessTokenEndpoint","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t121:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->assertSame('https://api.dropbox.com/1/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t129:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t130:      * @covers OAuth\\OAuth2\\Service\\Dropbox::getAuthorizationMethod","\t134:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t137:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t141:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t157:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t158:      * @covers OAuth\\OAuth2\\Service\\Dropbox::parseAccessTokenResponse","\t162:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t166:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t171:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t177:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Dropbox::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t197:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t198:      * @covers OAuth\\OAuth2\\Service\\Dropbox::parseAccessTokenResponse","\t202:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t206:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t208:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t211:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t215:      * @covers OAuth\\OAuth2\\Service\\Dropbox::__construct","\t216:      * @covers OAuth\\OAuth2\\Service\\Dropbox::parseAccessTokenResponse","\t220:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t224:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t226:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t229:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/EveOnlineTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\Common\\Token\\TokenInterface;","\t6: use OAuth\\OAuth2\\Service\\EveOnline;","\t11:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\EveOnline::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://login.eveonline.com/oauth/authorize',","\t71:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t72:      * @covers OAuth\\OAuth2\\Service\\EveOnline::getAccessTokenEndpoint","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t82:         $this->assertSame('https://login.eveonline.com/oauth/token',","\t87:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t88:      * @covers OAuth\\OAuth2\\Service\\EveOnline::getAuthorizationMethod","\t92:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t95:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t99:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t103:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t115:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t116:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t120:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t126:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t129:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t135:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t136:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t140:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t146:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t149:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t155:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t156:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t160:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t166:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t169:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t175:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t176:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t180:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t189:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t193:      * @covers OAuth\\OAuth2\\Service\\EveOnline::__construct","\t194:      * @covers OAuth\\OAuth2\\Service\\EveOnline::parseAccessTokenResponse","\t198:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t204:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t207:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/FacebookTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Facebook;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Facebook::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://www.facebook.com/dialog/oauth', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Facebook::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://graph.facebook.com/oauth/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t89:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t92:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t96:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t108:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t112:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t113:      * @covers OAuth\\OAuth2\\Service\\Facebook::parseAccessTokenResponse","\t117:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t121:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t123:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t126:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t132:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t133:      * @covers OAuth\\OAuth2\\Service\\Facebook::parseAccessTokenResponse","\t137:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t141:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t143:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t146:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t150:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t151:      * @covers OAuth\\OAuth2\\Service\\Facebook::parseAccessTokenResponse","\t155:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t159:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t161:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t164:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t168:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t169:      * @covers OAuth\\OAuth2\\Service\\Facebook::getDialogUri","\t173:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t176:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t178:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t181:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Exception\\\\Exception');","\t187:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t188:      * @covers OAuth\\OAuth2\\Service\\Facebook::getDialogUri","\t192:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t195:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t197:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t207:         $this->assertInstanceOf('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\Uri',$dialogUri);","\t211:      * @covers OAuth\\OAuth2\\Service\\Facebook::__construct","\t212:      * @covers OAuth\\OAuth2\\Service\\Facebook::getDialogUri","\t216:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t217:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t224:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/FoursquareTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Foursquare;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Foursquare::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://foursquare.com/oauth2/authenticate', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Foursquare::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://foursquare.com/oauth2/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Foursquare::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t109:         $this->assertTrue(in_array('OAuth foo', $headers, true));","\t113:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Foursquare::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Foursquare::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Foursquare::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\Foursquare::request","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t179:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t183:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t199:      * @covers OAuth\\OAuth2\\Service\\Foursquare::__construct","\t200:      * @covers OAuth\\OAuth2\\Service\\Foursquare::request","\t204:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t207:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t211:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t215:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/GitHubTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\GitHub;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\GitHub::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://github.com/login/oauth/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\GitHub::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://github.com/login/oauth/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\GitHub::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\GitHub::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\GitHub::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\GitHub::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\GitHub::getExtraOAuthHeaders","\t174:     public function testGetExtraOAuthHeaders()","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t185:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t190:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t194:      * @covers OAuth\\OAuth2\\Service\\GitHub::__construct","\t195:      * @covers OAuth\\OAuth2\\Service\\GitHub::getExtraApiHeaders","\t199:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t202:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t206:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t210:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/GoogleTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Google;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Google::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://accounts.google.com/o/oauth2/auth?access_type=online',","\t74:             'https://accounts.google.com/o/oauth2/auth?access_type=offline',","\t81:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t82:      * @covers OAuth\\OAuth2\\Service\\Google::getAuthorizationEndpoint","\t87:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t88:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t92:         $this->setExpectedException('OAuth\\OAuth2\\Service\\Exception\\InvalidAccessTypeException');","\t103:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t104:      * @covers OAuth\\OAuth2\\Service\\Google::getAccessTokenEndpoint","\t109:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t110:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t111:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t115:             'https://accounts.google.com/o/oauth2/token',","\t121:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t122:      * @covers OAuth\\OAuth2\\Service\\Google::parseAccessTokenResponse","\t126:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t132:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t135:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t141:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t142:      * @covers OAuth\\OAuth2\\Service\\Google::parseAccessTokenResponse","\t146:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t155:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t161:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t162:      * @covers OAuth\\OAuth2\\Service\\Google::parseAccessTokenResponse","\t166:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t172:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t175:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t179:      * @covers OAuth\\OAuth2\\Service\\Google::__construct","\t180:      * @covers OAuth\\OAuth2\\Service\\Google::parseAccessTokenResponse","\t184:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t190:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t193:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/HerokuTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Heroku;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Heroku::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://id.heroku.com/oauth/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Heroku::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t84:         $this->assertSame('https://id.heroku.com/oauth/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t88:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t89:      * @covers OAuth\\OAuth2\\Service\\Heroku::getAuthorizationMethod","\t93:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t96:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t100:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t104:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t116:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t117:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t121:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t125:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t127:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t130:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t136:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t137:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t141:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t145:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t150:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t156:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t157:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t161:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t165:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t170:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t176:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t177:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t181:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t185:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t190:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t194:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t195:      * @covers OAuth\\OAuth2\\Service\\Heroku::parseAccessTokenResponse","\t199:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t203:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t205:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t208:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t212:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t213:      * @covers OAuth\\OAuth2\\Service\\Heroku::getExtraOAuthHeaders","\t215:     public function testGetExtraOAuthHeaders()","\t217:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t226:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t228:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t231:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t235:      * @covers OAuth\\OAuth2\\Service\\Heroku::__construct","\t236:      * @covers OAuth\\OAuth2\\Service\\Heroku::getExtraApiHeaders","\t240:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t243:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t247:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t251:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/HubicTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Hubic;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Hubic::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.hubic.com/oauth/auth',","\t73:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Hubic::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.hubic.com/oauth/token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Hubic::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t105:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t111:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t112:      * @covers OAuth\\OAuth2\\Service\\Hubic::parseAccessTokenResponse","\t116:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t131:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t132:      * @covers OAuth\\OAuth2\\Service\\Hubic::parseAccessTokenResponse","\t136:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t140:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t149:      * @covers OAuth\\OAuth2\\Service\\Hubic::__construct","\t150:      * @covers OAuth\\OAuth2\\Service\\Hubic::parseAccessTokenResponse","\t154:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t163:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/InstagramTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Instagram;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Instagram::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.instagram.com/oauth/authorize/',","\t73:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Instagram::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.instagram.com/oauth/access_token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Instagram::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Instagram::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Instagram::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Instagram::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Instagram::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Instagram::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/JawboneUPTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\JawboneUP;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://jawbone.com/auth/oauth2/auth', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://jawbone.com/auth/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\JawboneUP::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/LinkedinTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Linkedin;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Linkedin::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://www.linkedin.com/uas/oauth2/authorization',","\t73:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Linkedin::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://www.linkedin.com/uas/oauth2/accessToken',","\t91:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Linkedin::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t118:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t119:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t123:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t127:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t129:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t132:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t138:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t139:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t143:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t149:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t152:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t158:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t159:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t172:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t178:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t179:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t183:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t189:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t192:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t196:      * @covers OAuth\\OAuth2\\Service\\Linkedin::__construct","\t197:      * @covers OAuth\\OAuth2\\Service\\Linkedin::parseAccessTokenResponse","\t201:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t205:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t207:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t210:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/MailchimpTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Mailchimp;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t7: use OAuth\\Common\\Http\\Uri\\Uri;","\t12:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t19:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t22:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t26:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t33:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t36:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t40:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t47:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t49:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t52:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t56:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t57:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::getAuthorizationEndpoint","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t64:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t68:             'https://login.mailchimp.com/oauth2/authorize',","\t74:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t75:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::getAccessTokenEndpoint","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t82:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t86:             'https://login.mailchimp.com/oauth2/token',","\t92:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t93:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::getAuthorizationMethod","\t97:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token');","\t104:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t108:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t123:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::parseAccessTokenResponse","\t127:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t131:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t133:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t136:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t142:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t143:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::parseAccessTokenResponse","\t147:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t151:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t153:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t156:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t162:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::__construct","\t163:      * @covers OAuth\\OAuth2\\Service\\Mailchimp::parseAccessTokenResponse","\t167:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t172:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t174:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t177:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/MicrosoftTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Microsoft;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Microsoft::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://login.live.com/oauth20_authorize.srf',","\t73:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Microsoft::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://login.live.com/oauth20_token.srf',","\t91:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Microsoft::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Microsoft::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Microsoft::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Microsoft::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Microsoft::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Microsoft::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/NestTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Nest;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Nest::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://home.nest.com/login/oauth2',","\t73:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Nest::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.home.nest.com/oauth2/access_token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Nest::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t118:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t119:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t123:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t127:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t129:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t132:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t138:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t139:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t143:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t147:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t149:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t152:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t158:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t159:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t163:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t167:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t169:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t172:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t178:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t179:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t183:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t187:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t189:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t192:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t196:      * @covers OAuth\\OAuth2\\Service\\Nest::__construct","\t197:      * @covers OAuth\\OAuth2\\Service\\Nest::parseAccessTokenResponse","\t201:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t205:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t207:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t210:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/NetatmoTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Netatmo;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Netatmo::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.netatmo.net/oauth2/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Netatmo::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.netatmo.net/oauth2/token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Netatmo::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t105:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t111:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t112:      * @covers OAuth\\OAuth2\\Service\\Netatmo::parseAccessTokenResponse","\t116:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t131:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t132:      * @covers OAuth\\OAuth2\\Service\\Netatmo::parseAccessTokenResponse","\t136:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t140:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t149:      * @covers OAuth\\OAuth2\\Service\\Netatmo::__construct","\t150:      * @covers OAuth\\OAuth2\\Service\\Netatmo::parseAccessTokenResponse","\t154:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t163:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/ParrotFlowerPowerTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\ParrotFlowerPower;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://apiflowerpower.parrot.com/oauth2/v1/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t91:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::parseAccessTokenResponse","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t100:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t102:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t105:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t111:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t112:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::parseAccessTokenResponse","\t116:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t120:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t125:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t131:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t132:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::parseAccessTokenResponse","\t136:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t140:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t145:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t149:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::__construct","\t150:      * @covers OAuth\\OAuth2\\Service\\ParrotFlowerPower::parseAccessTokenResponse","\t154:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t158:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t160:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t163:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/PaypalTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Paypal;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Paypal::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t73:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Paypal::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t91:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Paypal::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t180:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t184:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t190:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t193:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t197:      * @covers OAuth\\OAuth2\\Service\\Paypal::__construct","\t198:      * @covers OAuth\\OAuth2\\Service\\Paypal::parseAccessTokenResponse","\t202:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t206:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t208:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t211:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/PinterestTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Pinterest;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Pinterest::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.pinterest.com/oauth/',","\t73:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Pinterest::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.pinterest.com/v1/oauth/token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Box::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Box::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Pinterest::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Pinterest::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Pinterest::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t179:      * @covers OAuth\\OAuth2\\Service\\Pinterest::__construct","\t180:      * @covers OAuth\\OAuth2\\Service\\Pinterest::parseAccessTokenResponse","\t184:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t190:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t193:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/RedditTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Reddit;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Reddit::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t73:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Reddit::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t91:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Reddit::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Reddit::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Reddit::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Reddit::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Reddit::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Reddit::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/RunKeeperTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\RunKeeper;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t70:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t173:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t174:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t178:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t184:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t187:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t191:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::__construct","\t192:      * @covers OAuth\\OAuth2\\Service\\RunKeeper::parseAccessTokenResponse","\t196:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t200:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t202:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t205:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/SoundCloudTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\SoundCloud;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t70:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api.soundcloud.com/oauth2/token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::parseAccessTokenResponse","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t94:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t96:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t99:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t105:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t106:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::parseAccessTokenResponse","\t110:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t114:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t116:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t119:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t125:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t126:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::parseAccessTokenResponse","\t130:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t134:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t136:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t139:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t143:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::__construct","\t144:      * @covers OAuth\\OAuth2\\Service\\SoundCloud::parseAccessTokenResponse","\t148:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t154:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t157:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/SpotifyTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Spotify;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Spotify::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t70:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Spotify::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Spotify::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Spotify::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Spotify::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Spotify::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\Spotify::parseAccessTokenResponse","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t180:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t185:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t189:      * @covers OAuth\\OAuth2\\Service\\Spotify::__construct","\t190:      * @covers OAuth\\OAuth2\\Service\\Spotify::getExtraOAuthHeaders","\t192:     public function testGetExtraOAuthHeaders()","\t194:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t202:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t209:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t212:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/StravaTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Strava;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Strava::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://www.strava.com/oauth/authorize?approval_prompt=auto',","\t74:             'https://www.strava.com/oauth/authorize?approval_prompt=force',","\t81:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t82:      * @covers OAuth\\OAuth2\\Service\\Strava::getAuthorizationEndpoint","\t87:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t88:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t89:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t92:         $this->setExpectedException('OAuth\\OAuth2\\Service\\Exception\\InvalidAccessTypeException');","\t103:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t104:      * @covers OAuth\\OAuth2\\Service\\Strava::getAccessTokenEndpoint","\t109:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t110:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t111:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t115:             'https://www.strava.com/oauth/token',","\t121:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t122:      * @covers OAuth\\OAuth2\\Service\\Strava::parseAccessTokenResponse","\t126:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t132:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t135:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t141:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t142:      * @covers OAuth\\OAuth2\\Service\\Strava::parseAccessTokenResponse","\t146:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t155:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t161:      * @covers OAuth\\OAuth2\\Service\\Strava::__construct","\t162:      * @covers OAuth\\OAuth2\\Service\\Strava::parseAccessTokenResponse","\t166:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t172:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t175:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/UstreamTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Ustream;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Ustream::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://www.ustream.tv/oauth2/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Ustream::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://www.ustream.tv/oauth2/token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Ustream::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Ustream::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Ustream::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Ustream::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Ustream::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Ustream::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/VimeoTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Vimeo;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Vimeo::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t67:             'https://api.vimeo.com/oauth/authorize',","\t73:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t74:      * @covers OAuth\\OAuth2\\Service\\Vimeo::getAccessTokenEndpoint","\t79:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t80:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t81:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t85:             'https://api.vimeo.com/oauth/access_token',","\t91:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t92:      * @covers OAuth\\OAuth2\\Service\\Vimeo::getAuthorizationMethod","\t96:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t99:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t103:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t107:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t119:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t120:      * @covers OAuth\\OAuth2\\Service\\Vimeo::parseAccessTokenResponse","\t124:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t128:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t130:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t133:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t139:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t140:      * @covers OAuth\\OAuth2\\Service\\Vimeo::parseAccessTokenResponse","\t144:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t148:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t150:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t153:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t159:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t160:      * @covers OAuth\\OAuth2\\Service\\Vimeo::parseAccessTokenResponse","\t164:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t168:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t170:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t173:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t177:      * @covers OAuth\\OAuth2\\Service\\Vimeo::__construct","\t178:      * @covers OAuth\\OAuth2\\Service\\Vimeo::parseAccessTokenResponse","\t182:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t186:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t188:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t191:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/VkontakteTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Vkontakte;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://oauth.vk.com/authorize', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://oauth.vk.com/access_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::parseAccessTokenResponse","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t94:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t96:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t99:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t105:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t106:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::parseAccessTokenResponse","\t110:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t114:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t116:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t119:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t125:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t126:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::parseAccessTokenResponse","\t130:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t134:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t136:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t139:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t143:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::__construct","\t144:      * @covers OAuth\\OAuth2\\Service\\Vkontakte::parseAccessTokenResponse","\t148:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t152:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t154:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t157:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/YahooTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Yahoo;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Yahoo::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://api.login.yahoo.com/oauth2/request_auth', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Yahoo::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://api.login.yahoo.com/oauth2/get_token', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Yahoo::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Yahoo::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Yahoo::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Yahoo::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\Yahoo::parseAccessTokenResponse","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t180:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t185:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t189:      * @covers OAuth\\OAuth2\\Service\\Yahoo::__construct","\t190:      * @covers OAuth\\OAuth2\\Service\\Yahoo::getExtraOAuthHeaders","\t192:     public function testGetExtraOAuthHeaders()","\t194:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t202:         $credentials = $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface');","\t209:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t212:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","/vendor/lusitanian/oauth/tests/Unit/OAuth2/Service/YammerTest.php:","\t3: namespace OAuthTest\\Unit\\OAuth2\\Service;","\t5: use OAuth\\OAuth2\\Service\\Yammer;","\t6: use OAuth\\Common\\Token\\TokenInterface;","\t11:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t16:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t17:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t18:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t21:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\ServiceInterface', $service);","\t25:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t30:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t31:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t32:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t35:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t39:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t44:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t45:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t46:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface'),","\t48:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Uri\\\\UriInterface')","\t51:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Service\\\\AbstractService', $service);","\t55:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t56:      * @covers OAuth\\OAuth2\\Service\\Yammer::getAuthorizationEndpoint","\t61:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t62:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t63:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t66:         $this->assertSame('https://www.yammer.com/dialog/oauth', $service->getAuthorizationEndpoint()->getAbsoluteUri());","\t70:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t71:      * @covers OAuth\\OAuth2\\Service\\Yammer::getAccessTokenEndpoint","\t76:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t77:             $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface'),","\t78:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t81:         $this->assertSame('https://www.yammer.com/oauth2/access_token.json', $service->getAccessTokenEndpoint()->getAbsoluteUri());","\t85:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t86:      * @covers OAuth\\OAuth2\\Service\\Yammer::getAuthorizationMethod","\t90:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t93:         $token = $this->getMock('\\\\OAuth\\\\OAuth2\\\\Token\\\\TokenInterface');","\t97:         $storage = $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface');","\t101:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t113:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t114:      * @covers OAuth\\OAuth2\\Service\\Yammer::parseAccessTokenResponse","\t118:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t122:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t124:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t127:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t133:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t134:      * @covers OAuth\\OAuth2\\Service\\Yammer::parseAccessTokenResponse","\t138:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t142:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t144:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t147:         $this->setExpectedException('\\\\OAuth\\\\Common\\\\Http\\\\Exception\\\\TokenResponseException');","\t153:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t154:      * @covers OAuth\\OAuth2\\Service\\Yammer::parseAccessTokenResponse","\t158:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t162:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t164:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t167:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","\t171:      * @covers OAuth\\OAuth2\\Service\\Yammer::__construct","\t172:      * @covers OAuth\\OAuth2\\Service\\Yammer::parseAccessTokenResponse","\t176:         $client = $this->getMock('\\\\OAuth\\\\Common\\\\Http\\\\Client\\\\ClientInterface');","\t180:             $this->getMock('\\\\OAuth\\\\Common\\\\Consumer\\\\CredentialsInterface'),","\t182:             $this->getMock('\\\\OAuth\\\\Common\\\\Storage\\\\TokenStorageInterface')","\t185:         $this->assertInstanceOf('\\\\OAuth\\\\OAuth2\\\\Token\\\\StdOAuth2Token', $service->requestAccessToken('foo'));","","Found 7972 matches in 221 files ","",""],"id":15},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001class oauth\u0001 in\u0001/vendor/lusitanian\u0001","",""]}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["Found 0 matches in 0 files ",""],"id":16},{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":50},"end":{"row":0,"column":79},"action":"insert","lines":[" (Found 0 matches in 0 files)"]}],[{"start":{"row":0,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["Searching for \u0001class oauth\u0001 in\u0001/vendor/lusitanian\u0001 (Found 0 matches in 0 files)","","Found 0 matches in 0 files ","",""],"id":17},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001class auth\u0001 in\u0001/vendor/lusitanian\u0001","",""]}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Exception/AuthorizationStateNotFoundException.php:",""],"id":18},{"start":{"row":3,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["\t8: class AuthorizationStateNotFoundException extends StorageException","",""]}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["Found 1 match in 1 file ",""],"id":19},{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":49},"end":{"row":0,"column":75},"action":"insert","lines":[" (Found 1 match in 1 file)"]}],[{"start":{"row":0,"column":0},"end":{"row":7,"column":0},"action":"remove","lines":["Searching for \u0001class auth\u0001 in\u0001/vendor/lusitanian\u0001 (Found 1 match in 1 file)","","/vendor/lusitanian/oauth/src/OAuth/Common/Storage/Exception/AuthorizationStateNotFoundException.php:","\t8: class AuthorizationStateNotFoundException extends StorageException","","Found 1 match in 1 file ","",""],"id":20},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001class oauth\u0001 in\u0001/vendor/lusitanian\u0001","",""]}]]},"ace":{"folds":[],"customSyntax":"c9search","scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":0},"end":{"row":2,"column":0},"isBackwards":false},"options":{"tabSize":4,"useSoftTabs":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1463263548482}